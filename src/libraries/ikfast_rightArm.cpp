/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-07-19 15:08:21.225628
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( std::isnan(fy) ) {
        IKFAST_ASSERT(!std::isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( std::isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((IkReal(1.00000000000000))*(x8));
x15=((IkReal(0.118000000000000))*(x9));
x16=((IkReal(1.00000000000000))*(x4));
x17=((IkReal(0.0300000000000000))*(x2));
x18=((IkReal(1.00000000000000))*(x5));
x19=((IkReal(1.00000000000000))*(x7));
x20=((IkReal(0.118000000000000))*(x7));
x21=((IkReal(1.00000000000000))*(x11));
x22=((IkReal(0.313800000000000))*(x2));
x23=((IkReal(1.00000000000000))*(x9));
x24=((IkReal(0.118000000000000))*(x8));
x25=((x1)*(x3));
x26=((x2)*(x5));
x27=((x0)*(x1));
x28=((x0)*(x4));
x29=((x0)*(x6));
x30=((x1)*(x6));
x31=((x4)*(x6));
x32=((x3)*(x4));
x33=((IkReal(0.0300000000000000))*(x25));
x34=((IkReal(0.0300000000000000))*(x27));
x35=((x31)*(x5));
x36=((x3)*(x6)*(x7));
x37=((x3)*(x5)*(x6));
x38=((x19)*(x29));
x39=((x18)*(x29));
x40=((x17)*(x28));
x41=((x16)*(x6)*(x7));
x42=((x16)*(x2)*(x3));
x43=((x17)*(x32));
x44=((((x2)*(x28)))+(x25));
x45=((((IkReal(-1.00000000000000))*(x16)*(x3)))+(((x2)*(x27))));
x46=((((IkReal(-1.00000000000000))*(x41)))+(x26));
x47=((x35)+(((x2)*(x7))));
x48=((((IkReal(-1.00000000000000))*(x42)))+(x27));
x49=((((IkReal(-1.00000000000000))*(x27)))+(x42));
x50=((((IkReal(-1.00000000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x0)*(x16)*(x2))));
x51=((((IkReal(-1.00000000000000))*(x0)*(x16)))+(((IkReal(-1.00000000000000))*(x2)*(x25))));
x52=((x33)+(x40));
x53=((x48)*(x5));
x54=((x45)*(x8));
x55=((x51)*(x9));
x56=((x51)*(x8));
x57=((x50)*(x7));
x58=((((IkReal(-1.00000000000000))*(x38)))+(((x44)*(x5))));
x59=((((x47)*(x9)))+(((x30)*(x8))));
x60=((x36)+(x53));
x61=((((x49)*(x7)))+(x37));
x62=((((IkReal(-1.00000000000000))*(x39)))+(x57));
x63=((x10)*(x59));
x64=((((x14)*(((((x19)*(x2)))+(((x16)*(x5)*(x6)))))))+(((IkReal(-1.00000000000000))*(x23)*(x30))));
x65=((x11)*(x62));
x66=((x54)+(((x58)*(x9))));
x67=((((x60)*(x9)))+(x56));
x68=((x10)*(x66));
x69=((((x14)*(((((IkReal(-1.00000000000000))*(x38)))+(((x18)*(x44)))))))+(((IkReal(-1.00000000000000))*(x23)*(x45))));
x70=((x10)*(x67));
eerot[0]=((((x12)*(x69)))+(((x13)*(((x65)+(x68))))));
eerot[1]=((((x10)*(((x39)+(((IkReal(-1.00000000000000))*(x19)*(x50)))))))+(((x11)*(x66))));
eerot[2]=((((x13)*(x69)))+(((x12)*(((((IkReal(-1.00000000000000))*(x68)))+(((IkReal(-1.00000000000000))*(x65))))))));
IkReal x71=((x29)*(x5));
eetrans[0]=((IkReal(0.00100000000000000))+(((x7)*(((((IkReal(-0.313800000000000))*(x25)))+(((IkReal(-1.00000000000000))*(x22)*(x28)))))))+(((IkReal(-1.00000000000000))*(x5)*(x52)))+(((IkReal(-0.300000000000000))*(x29)))+(x52)+(((IkReal(-0.313800000000000))*(x71)))+(((x11)*(((((IkReal(-1.00000000000000))*(x24)*(x45)))+(((IkReal(-1.00000000000000))*(x15)*(x58)))))))+(((IkReal(0.0300000000000000))*(x29)*(x7)))+(((x10)*(((((x20)*(x50)))+(((IkReal(-0.118000000000000))*(x71))))))));
eerot[3]=((((x12)*(x64)))+(((x13)*(((((x11)*(x46)))+(x63))))));
eerot[4]=((((x11)*(x59)))+(((x10)*(((((IkReal(-1.00000000000000))*(x18)*(x2)))+(x41))))));
eerot[5]=((((x13)*(x64)))+(((x12)*(((((IkReal(-1.00000000000000))*(x21)*(x46)))+(((IkReal(-1.00000000000000))*(x63))))))));
eetrans[1]=((IkReal(-0.229500000000000))+(((x11)*(((((IkReal(-1.00000000000000))*(x15)*(x47)))+(((IkReal(-1.00000000000000))*(x24)*(x30)))))))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x31)))+(((IkReal(0.118000000000000))*(x26)))))))+(((IkReal(-0.313800000000000))*(x31)*(x7)))+(((x22)*(x5)))+(((IkReal(0.0300000000000000))*(x31)))+(((IkReal(-0.0300000000000000))*(x35)))+(((IkReal(-1.00000000000000))*(x17)*(x7)))+(((IkReal(0.300000000000000))*(x2))));
eerot[6]=((((x13)*(((((IkReal(-1.00000000000000))*(x70)))+(((IkReal(-1.00000000000000))*(x21)*(x61)))))))+(((x12)*(((x55)+(((x8)*(((((IkReal(-1.00000000000000))*(x36)))+(((IkReal(-1.00000000000000))*(x53))))))))))));
eerot[7]=((((x11)*(((((IkReal(-1.00000000000000))*(x23)*(x60)))+(((IkReal(-1.00000000000000))*(x14)*(x51)))))))+(((x10)*(x61))));
eerot[8]=((((x13)*(((((x8)*(((((IkReal(-1.00000000000000))*(x18)*(x48)))+(((IkReal(-1.00000000000000))*(x19)*(x3)*(x6)))))))+(x55)))))+(((x12)*(((((x11)*(x61)))+(x70))))));
eetrans[2]=((IkReal(0.206100000000000))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x49)))+(((IkReal(-0.118000000000000))*(x37)))))))+(((IkReal(-1.00000000000000))*(x34)))+(((IkReal(-0.313800000000000))*(x37)))+(((IkReal(0.0300000000000000))*(x36)))+(((IkReal(-0.300000000000000))*(x3)*(x6)))+(((x11)*(((((x15)*(x60)))+(((x24)*(x51)))))))+(x43)+(((x7)*(((((IkReal(-1.00000000000000))*(x22)*(x32)))+(((IkReal(0.313800000000000))*(x27)))))))+(((x5)*(((((IkReal(-1.00000000000000))*(x43)))+(x34))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j26,cj26,sj26,htj26,j27,cj27,sj27,htj27,j29,cj29,sj29,htj29,j30,cj30,sj30,htj30,j31,cj31,sj31,htj31,j32,cj32,sj32,htj32,j28,cj28,sj28,htj28,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij26[2], _nj26,_ij27[2], _nj27,_ij29[2], _nj29,_ij30[2], _nj30,_ij31[2], _nj31,_ij32[2], _nj32,_ij28[2], _nj28;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j26=numeric_limits<IkReal>::quiet_NaN(); _ij26[0] = -1; _ij26[1] = -1; _nj26 = -1; j27=numeric_limits<IkReal>::quiet_NaN(); _ij27[0] = -1; _ij27[1] = -1; _nj27 = -1; j29=numeric_limits<IkReal>::quiet_NaN(); _ij29[0] = -1; _ij29[1] = -1; _nj29 = -1; j30=numeric_limits<IkReal>::quiet_NaN(); _ij30[0] = -1; _ij30[1] = -1; _nj30 = -1; j31=numeric_limits<IkReal>::quiet_NaN(); _ij31[0] = -1; _ij31[1] = -1; _nj31 = -1; j32=numeric_limits<IkReal>::quiet_NaN(); _ij32[0] = -1; _ij32[1] = -1; _nj32 = -1;  _ij28[0] = -1; _ij28[1] = -1; _nj28 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j28=pfree[0]; cj28=cos(pfree[0]); sj28=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r02));
new_r01=((IkReal(-1.00000000000000))*(r00));
new_r02=r01;
new_px=((IkReal(-0.00100000000000000))+(px)+(((IkReal(0.118000000000000))*(r01))));
new_r10=r22;
new_r11=r20;
new_r12=((IkReal(-1.00000000000000))*(r21));
new_py=((IkReal(0.206100000000000))+(((IkReal(-0.118000000000000))*(r21)))+(((IkReal(-1.00000000000000))*(pz))));
new_r20=((IkReal(-1.00000000000000))*(r12));
new_r21=((IkReal(-1.00000000000000))*(r10));
new_r22=r11;
new_pz=((IkReal(0.229500000000000))+(((IkReal(0.118000000000000))*(r11)))+(py));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j29array[2], cj29array[2], sj29array[2];
bool j29valid[2]={false};
_nj29 = 2;
if( (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x72=IKasin(((IkReal(1.00099239693695))+(((IkReal(-5.26089284776420))*(pp)))));
j29array[0]=((IkReal(-1.76577759872331))+(((IkReal(-1.00000000000000))*(x72))));
sj29array[0]=IKsin(j29array[0]);
cj29array[0]=IKcos(j29array[0]);
j29array[1]=((IkReal(1.37581505486648))+(x72));
sj29array[1]=IKsin(j29array[1]);
cj29array[1]=IKcos(j29array[1]);
if( j29array[0] > IKPI )
{
    j29array[0]-=IK2PI;
}
else if( j29array[0] < -IKPI )
{    j29array[0]+=IK2PI;
}
j29valid[0] = true;
if( j29array[1] > IKPI )
{
    j29array[1]-=IK2PI;
}
else if( j29array[1] < -IKPI )
{    j29array[1]+=IK2PI;
}
j29valid[1] = true;
for(int ij29 = 0; ij29 < 2; ++ij29)
{
if( !j29valid[ij29] )
{
    continue;
}
_ij29[0] = ij29; _ij29[1] = -1;
for(int iij29 = ij29+1; iij29 < 2; ++iij29)
{
if( j29valid[iij29] && IKabs(cj29array[ij29]-cj29array[iij29]) < IKFAST_SOLUTION_THRESH && IKabs(sj29array[ij29]-sj29array[iij29]) < IKFAST_SOLUTION_THRESH )
{
    j29valid[iij29]=false; _ij29[1] = iij29; break; 
}
}
j29 = j29array[ij29]; cj29 = cj29array[ij29]; sj29 = sj29array[ij29];

{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x73=(sj28)*(sj28);
IkReal x74=(sj29)*(sj29);
IkReal x75=(cj29)*(cj29);
IkReal x76=((IkReal(20.9200000000000))*(sj29));
IkReal x77=((cj29)*(x73));
dummyeval[0]=((IkReal(100.000000000000))+(((IkReal(109.411600000000))*(x73)*(x74)))+(((IkReal(-1.00000000000000))*(cj29)*(x76)))+(((IkReal(-20.0000000000000))*(sj29)))+(((IkReal(-2.00000000000000))*(x77)))+(x74)+(x73)+(((x76)*(x77)))+(((IkReal(-1.00000000000000))*(x73)*(x76)))+(((IkReal(209.200000000000))*(cj29)))+(((x73)*(x75)))+(((IkReal(109.411600000000))*(x75))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j27array[2], cj27array[2], sj27array[2];
bool j27valid[2]={false};
_nj27 = 2;
IkReal x78=((IkReal(0.0300000000000000))*(sj28));
IkReal x79=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-0.0300000000000000))*(sj29))));
IkReal x80=((((IkReal(-1.00000000000000))*(cj29)*(x78)))+(((IkReal(-0.313800000000000))*(sj28)*(sj29)))+(x78));
if( IKabs(x80) < IKFAST_ATAN2_MAGTHRESH && IKabs(x79) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x81=((IkReal(1.00000000000000))*(IKatan2(x80, x79)));
if( ((((x79)*(x79))+((x80)*(x80)))) < (IkReal)-0.00001 )
    continue;
if( (((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x82=IKasin(((pz)*(((IKabs(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x79)*(x79))+((x80)*(x80))))))):(IkReal)1.0e30))));
j27array[0]=((x82)+(((IkReal(-1.00000000000000))*(x81))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
j27array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x82)))+(((IkReal(-1.00000000000000))*(x81))));
sj27array[1]=IKsin(j27array[1]);
cj27array[1]=IKcos(j27array[1]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
if( j27array[1] > IKPI )
{
    j27array[1]-=IK2PI;
}
else if( j27array[1] < -IKPI )
{    j27array[1]+=IK2PI;
}
j27valid[1] = true;
for(int ij27 = 0; ij27 < 2; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 2; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((cj27)*((py)*(py))))+(((cj27)*((px)*(px))))));
dummyeval[0]=((((cj27)*((py)*(py))))+(((cj27)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x83=((cj28)*(sj27));
gconst1=IKsign(((((x83)*((py)*(py))))+(((x83)*((px)*(px))))));
IkReal x84=((cj28)*(sj27));
dummyeval[0]=((((x84)*((px)*(px))))+(((x84)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x85=((IkReal(0.0300000000000000))*(cj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((((IkReal(0.313800000000000))*(cj29)*(sj27)))+(((IkReal(-1.00000000000000))*(cj29)*(x85)))+(((IkReal(-0.313800000000000))*(cj27)*(sj29)))+(((IkReal(-0.0300000000000000))*(sj27)*(sj29)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(sj27)))+(x85));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((cj27)*((py)*(py))))+(((cj27)*((px)*(px))))));
dummyeval[0]=((((cj27)*((py)*(py))))+(((cj27)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj27)*((py)*(py))))+(((sj27)*((px)*(px))))));
dummyeval[0]=((((sj27)*((py)*(py))))+(((sj27)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x86=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x86;
evalcond[3]=x86;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x87=((IkReal(5.00000000000000))*(pp));
IkReal x88=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x88)))+(((IkReal(-1.00000000000000))*(px)*(x87))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x88)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x87))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst5)*(((((IkReal(0.0423522000000000))*(px)))+(((px)*(x88)))+(((IkReal(-1.00000000000000))*(px)*(x87)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(py)*(x88)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x87)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x89=IKsin(j26);
IkReal x90=IKcos(j26);
IkReal x91=((px)*(x89));
IkReal x92=((IkReal(1.00000000000000))*(x90));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x89)))+(((IkReal(-1.00000000000000))*(px)*(x92))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x91)+(((IkReal(-0.0300000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(py)*(x92))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x90)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x91))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x262=((IkReal(0.0300000000000000))*(sj29));
IkReal x263=((IkReal(0.313800000000000))*(cj29));
if( IKabs(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x262)))+(((px)*(x263))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x262)))+(((IkReal(-1.00000000000000))*(py)*(x263))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst4)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x262)))+(((px)*(x263)))))), ((gconst4)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x262)))+(((IkReal(-1.00000000000000))*(py)*(x263)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x264=IKsin(j26);
IkReal x265=IKcos(j26);
IkReal x266=((px)*(x264));
IkReal x267=((IkReal(1.00000000000000))*(x265));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x264)))+(((IkReal(-1.00000000000000))*(px)*(x267))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x266)+(((IkReal(-0.0300000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(py)*(x267))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x266)))+(((IkReal(0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x265))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x268=((IkReal(0.313800000000000))*(sj29));
IkReal x269=((IkReal(0.0300000000000000))*(cj29));
IkReal x270=((x269)+(x268));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j27, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(x270));
evalcond[3]=((IkReal(0.0300000000000000))+(pz)+(((IkReal(-1.00000000000000))*(x270))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x271=((IkReal(5.00000000000000))*(pp));
IkReal x272=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x271)))+(((IkReal(-1.00000000000000))*(px)*(x272))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x271)))+(((py)*(x272))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst7)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x271)))+(((IkReal(-1.00000000000000))*(px)*(x272)))))), ((gconst7)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x271)))+(((py)*(x272)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x273=IKcos(j26);
IkReal x274=IKsin(j26);
IkReal x275=((py)*(x273));
IkReal x276=((px)*(x274));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x273)))+(((IkReal(-1.00000000000000))*(py)*(x274))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x276)))+(x275)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(x276)))+(((IkReal(-0.600000000000000))*(x275))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x277=((IkReal(0.0300000000000000))*(sj29));
IkReal x278=((IkReal(0.313800000000000))*(cj29));
if( IKabs(((gconst6)*(((((px)*(x278)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x277))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x277)))+(((IkReal(-1.00000000000000))*(py)*(x278))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst6)*(((((px)*(x278)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x277)))))), ((gconst6)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x277)))+(((IkReal(-1.00000000000000))*(py)*(x278)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x279=IKcos(j26);
IkReal x280=IKsin(j26);
IkReal x281=((py)*(x279));
IkReal x282=((px)*(x280));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x279)))+(((IkReal(-1.00000000000000))*(py)*(x280))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x281)+(((IkReal(-1.00000000000000))*(x282)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x281)))+(((IkReal(0.600000000000000))*(x282)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x283=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x283;
evalcond[3]=x283;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x284=((IkReal(50.0000000000000))*(pp));
IkReal x285=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x284)))+(((px)*(x285))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(py)*(x285)))+(((IkReal(-0.423522000000000))*(py)))+(((py)*(x284))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst9)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x284)))+(((px)*(x285)))))), ((gconst9)*(((((IkReal(-1.00000000000000))*(py)*(x285)))+(((IkReal(-0.423522000000000))*(py)))+(((py)*(x284)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x286=IKcos(j26);
IkReal x287=IKsin(j26);
IkReal x288=((IkReal(1.00000000000000))*(px));
IkReal x289=((py)*(x286));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x287)))+(((IkReal(-1.00000000000000))*(x286)*(x288))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x287)*(x288)))+(((IkReal(-0.0300000000000000))*(cj29)))+(x289)+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x289)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x290=((IkReal(0.0300000000000000))*(cj29));
IkReal x291=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst8)*(((((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x290)))+(((IkReal(-1.00000000000000))*(px)*(x291))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((py)*(x290)))+(((py)*(x291)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst8)*(((((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x290)))+(((IkReal(-1.00000000000000))*(px)*(x291)))))), ((gconst8)*(((((py)*(x290)))+(((py)*(x291)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x292=IKcos(j26);
IkReal x293=IKsin(j26);
IkReal x294=((IkReal(1.00000000000000))*(px));
IkReal x295=((py)*(x292));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x293)))+(((IkReal(-1.00000000000000))*(x292)*(x294))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x293)*(x294)))+(x295)+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(px)*(x293)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x295))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x296=((IkReal(0.0300000000000000))*(sj29));
IkReal x297=((IkReal(0.313800000000000))*(cj29));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x296)))+(x297)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x297)))+(((IkReal(-1.00000000000000))*(pz)))+(x296));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x298=((IkReal(50.0000000000000))*(pp));
IkReal x299=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x299)))+(((IkReal(-1.00000000000000))*(px)*(x298))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((py)*(x299)))+(((py)*(x298)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst11)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x299)))+(((IkReal(-1.00000000000000))*(px)*(x298)))))), ((gconst11)*(((((py)*(x299)))+(((py)*(x298)))+(((IkReal(-0.423522000000000))*(py)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x300=IKsin(j26);
IkReal x301=IKcos(j26);
IkReal x302=((py)*(x301));
IkReal x303=((px)*(x300));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x301)))+(((IkReal(-1.00000000000000))*(py)*(x300))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x302)))+(x303)+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x302)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x303)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x304=((IkReal(0.0300000000000000))*(cj29));
IkReal x305=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(px)*(x305)))+(((IkReal(-1.00000000000000))*(px)*(x304)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((py)*(x305)))+(((py)*(x304)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(px)*(x305)))+(((IkReal(-1.00000000000000))*(px)*(x304)))+(((IkReal(0.0300000000000000))*(px)))))), ((gconst10)*(((((py)*(x305)))+(((py)*(x304)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x306=IKsin(j26);
IkReal x307=IKcos(j26);
IkReal x308=((py)*(x307));
IkReal x309=((px)*(x306));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x307)))+(((IkReal(-1.00000000000000))*(py)*(x306))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x308)))+(x309)+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x308)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x309)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x310=((cj27)*(pz));
IkReal x311=((IkReal(0.0300000000000000))*(cj29));
IkReal x312=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x310)))+(((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x312)))+(((IkReal(-1.00000000000000))*(px)*(x311))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((py)*(x310)))+(((py)*(x312)))+(((py)*(x311)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(px)*(x310)))+(((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x312)))+(((IkReal(-1.00000000000000))*(px)*(x311)))))), ((gconst3)*(((((py)*(x310)))+(((py)*(x312)))+(((py)*(x311)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x313=IKsin(j26);
IkReal x314=IKcos(j26);
IkReal x315=((IkReal(0.313800000000000))*(cj29));
IkReal x316=((IkReal(1.00000000000000))*(cj27));
IkReal x317=((IkReal(0.0300000000000000))*(cj29));
IkReal x318=((pz)*(sj27));
IkReal x319=((IkReal(0.0600000000000000))*(sj27));
IkReal x320=((IkReal(0.313800000000000))*(sj29));
IkReal x321=((IkReal(0.0300000000000000))*(sj29));
IkReal x322=((py)*(x314));
IkReal x323=((px)*(x313));
IkReal x324=((cj27)*(x323));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x314)))+(((IkReal(-1.00000000000000))*(py)*(x313))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x321)))+(x324)+(x315)+(((IkReal(-1.00000000000000))*(x316)*(x322)))+(((IkReal(-1.00000000000000))*(x318))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x320)))+(((sj27)*(x322)))+(((IkReal(-1.00000000000000))*(x317)))+(((IkReal(-1.00000000000000))*(sj27)*(x323)))+(((IkReal(-1.00000000000000))*(pz)*(x316))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj27)*(x321)))+(((sj27)*(x317)))+(((IkReal(-1.00000000000000))*(x322)))+(x323)+(((sj27)*(x320)))+(((IkReal(-0.0300000000000000))*(sj27)))+(((IkReal(0.300000000000000))*(cj27)))+(((cj27)*(x315))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x324)))+(((IkReal(0.600000000000000))*(x318)))+(((IkReal(0.600000000000000))*(cj27)*(x322)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x319)*(x322)))+(((IkReal(0.0600000000000000))*(cj27)*(pz)))+(((x319)*(x323))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x325=((IkReal(0.0300000000000000))*(sj29));
IkReal x326=((IkReal(0.313800000000000))*(cj29));
IkReal x327=((pz)*(sj27));
if( IKabs(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x326)))+(((px)*(x327)))+(((px)*(x325))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x327)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x326)))+(((IkReal(-1.00000000000000))*(py)*(x325))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst2)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x326)))+(((px)*(x327)))+(((px)*(x325)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(py)*(x327)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x326)))+(((IkReal(-1.00000000000000))*(py)*(x325)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x328=IKsin(j26);
IkReal x329=IKcos(j26);
IkReal x330=((IkReal(0.313800000000000))*(cj29));
IkReal x331=((IkReal(1.00000000000000))*(cj27));
IkReal x332=((IkReal(0.0300000000000000))*(cj29));
IkReal x333=((pz)*(sj27));
IkReal x334=((IkReal(0.0600000000000000))*(sj27));
IkReal x335=((IkReal(0.313800000000000))*(sj29));
IkReal x336=((IkReal(0.0300000000000000))*(sj29));
IkReal x337=((py)*(x329));
IkReal x338=((px)*(x328));
IkReal x339=((cj27)*(x338));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x328)))+(((IkReal(-1.00000000000000))*(px)*(x329))));
evalcond[1]=((IkReal(0.300000000000000))+(x339)+(x330)+(((IkReal(-1.00000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(x331)*(x337)))+(((IkReal(-1.00000000000000))*(x336))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x331)))+(((sj27)*(x337)))+(((IkReal(-1.00000000000000))*(x335)))+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(-1.00000000000000))*(sj27)*(x338))));
evalcond[3]=((((cj27)*(x330)))+(((IkReal(-1.00000000000000))*(cj27)*(x336)))+(x338)+(((sj27)*(x332)))+(((sj27)*(x335)))+(((IkReal(-1.00000000000000))*(x337)))+(((IkReal(-0.0300000000000000))*(sj27)))+(((IkReal(0.300000000000000))*(cj27))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x334)*(x338)))+(((IkReal(0.600000000000000))*(cj27)*(x337)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(cj27)*(pz)))+(((IkReal(-0.600000000000000))*(x339)))+(((IkReal(0.600000000000000))*(x333)))+(((IkReal(-1.00000000000000))*(x334)*(x337))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x340=((IkReal(0.0300000000000000))*(cj27));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((((IkReal(0.313800000000000))*(cj27)*(sj29)))+(((IkReal(0.313800000000000))*(cj29)*(sj27)))+(((IkReal(-0.0300000000000000))*(sj27)*(sj29)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.300000000000000))*(sj27)))+(((cj29)*(x340)))+(((IkReal(-1.00000000000000))*(x340))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign(((((sj27)*((py)*(py))))+(((sj27)*((px)*(px))))));
dummyeval[0]=((((sj27)*((py)*(py))))+(((sj27)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((cj27)*((py)*(py))))+(((cj27)*((px)*(px))))));
dummyeval[0]=((((cj27)*((py)*(py))))+(((cj27)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x341=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x341;
evalcond[3]=x341;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x342=((IkReal(50.0000000000000))*(pp));
IkReal x343=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x342)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x343))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((py)*(x342)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x343))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(px)*(x342)))+(((IkReal(0.423522000000000))*(px)))+(((px)*(x343)))))), ((gconst15)*(((((py)*(x342)))+(((IkReal(-0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x343)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x344=IKsin(j26);
IkReal x345=IKcos(j26);
IkReal x346=((py)*(x345));
IkReal x347=((px)*(x344));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x345)))+(((IkReal(-1.00000000000000))*(py)*(x344))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(x347)+(((IkReal(-0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x346))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(x347)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x346))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x348=((IkReal(0.0300000000000000))*(cj29));
IkReal x349=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x349)))+(((IkReal(-1.00000000000000))*(px)*(x348)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((py)*(x349)))+(((py)*(x348)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(px)*(x349)))+(((IkReal(-1.00000000000000))*(px)*(x348)))+(((IkReal(0.0300000000000000))*(px)))))), ((gconst14)*(((((py)*(x349)))+(((py)*(x348)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x350=IKsin(j26);
IkReal x351=IKcos(j26);
IkReal x352=((py)*(x351));
IkReal x353=((px)*(x350));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x350)))+(((IkReal(-1.00000000000000))*(px)*(x351))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x352)))+(x353)+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x353)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x352))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x354=((IkReal(0.0300000000000000))*(sj29));
IkReal x355=((IkReal(0.313800000000000))*(cj29));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x354)))+(x355)+(pz));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(x355)))+(x354)+(((IkReal(-1.00000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x356=((IkReal(50.0000000000000))*(pp));
IkReal x357=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(px)*(x357))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((py)*(x356)))+(((py)*(x357)))+(((IkReal(-0.423522000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst17)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(-1.00000000000000))*(px)*(x357)))))), ((gconst17)*(((((py)*(x356)))+(((py)*(x357)))+(((IkReal(-0.423522000000000))*(py)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x358=IKcos(j26);
IkReal x359=IKsin(j26);
IkReal x360=((IkReal(1.00000000000000))*(px));
IkReal x361=((py)*(x358));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x359)))+(((IkReal(-1.00000000000000))*(x358)*(x360))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(x361)+(((IkReal(-0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x359)*(x360))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(px)*(x359)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x361))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x362=((IkReal(0.0300000000000000))*(cj29));
IkReal x363=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst16)*(((((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x363)))+(((IkReal(-1.00000000000000))*(px)*(x362))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((py)*(x363)))+(((py)*(x362)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst16)*(((((IkReal(0.0300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x363)))+(((IkReal(-1.00000000000000))*(px)*(x362)))))), ((gconst16)*(((((py)*(x363)))+(((py)*(x362)))+(((IkReal(-0.0300000000000000))*(py)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x364=IKcos(j26);
IkReal x365=IKsin(j26);
IkReal x366=((IkReal(1.00000000000000))*(px));
IkReal x367=((py)*(x364));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x365)))+(((IkReal(-1.00000000000000))*(x364)*(x366))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(x367)+(((IkReal(-0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x365)*(x366))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x365)))+(((IkReal(-0.0600000000000000))*(x367))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x368=((IkReal(0.313800000000000))*(sj29));
IkReal x369=((IkReal(0.0300000000000000))*(cj29));
IkReal x370=((x368)+(x369));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((IkReal(-0.0300000000000000))+(x370)+(((IkReal(-1.00000000000000))*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x370)))+(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign(((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x371=((IkReal(5.00000000000000))*(pp));
IkReal x372=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x372)))+(((IkReal(-1.00000000000000))*(px)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x372)))+(((py)*(x371))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst19)*(((((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x372)))+(((IkReal(-1.00000000000000))*(px)*(x371)))))), ((gconst19)*(((((IkReal(-0.0423522000000000))*(py)))+(((py)*(x372)))+(((py)*(x371)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x373=IKsin(j26);
IkReal x374=IKcos(j26);
IkReal x375=((px)*(x373));
IkReal x376=((IkReal(1.00000000000000))*(x374));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x373)))+(((IkReal(-1.00000000000000))*(px)*(x376))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x375)+(((IkReal(-0.0300000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(py)*(x376))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x375)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(0.600000000000000))*(py)*(x374))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x377=((IkReal(0.0300000000000000))*(sj29));
IkReal x378=((IkReal(0.313800000000000))*(cj29));
if( IKabs(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x377))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x377)))+(((IkReal(-1.00000000000000))*(py)*(x378))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst18)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x378)))+(((IkReal(-1.00000000000000))*(px)*(x377)))))), ((gconst18)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x377)))+(((IkReal(-1.00000000000000))*(py)*(x378)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x379=IKsin(j26);
IkReal x380=IKcos(j26);
IkReal x381=((px)*(x379));
IkReal x382=((IkReal(1.00000000000000))*(x380));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x379)))+(((IkReal(-1.00000000000000))*(px)*(x382))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(py)*(x382)))+(((IkReal(0.313800000000000))*(cj29)))+(x381)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(py)*(x380)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(pz)))+(((IkReal(-0.600000000000000))*(x381))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x383=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j27, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x383;
evalcond[3]=x383;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x384=((IkReal(5.00000000000000))*(pp));
IkReal x385=((IkReal(0.300000000000000))*(pz));
if( IKabs(((gconst21)*(((((px)*(x385)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x385)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x384))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst21)*(((((px)*(x385)))+(((IkReal(0.0423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x384)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(py)*(x385)))+(((IkReal(-0.0423522000000000))*(py)))+(((py)*(x384)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x386=IKcos(j26);
IkReal x387=IKsin(j26);
IkReal x388=((py)*(x386));
IkReal x389=((px)*(x387));
evalcond[0]=((((IkReal(-1.00000000000000))*(px)*(x386)))+(((IkReal(-1.00000000000000))*(py)*(x387))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x388)+(((IkReal(-1.00000000000000))*(x389)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x389)))+(((IkReal(-0.600000000000000))*(x388)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x390=((IkReal(0.0300000000000000))*(sj29));
IkReal x391=((IkReal(0.313800000000000))*(cj29));
if( IKabs(((gconst20)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x391)))+(((IkReal(-1.00000000000000))*(px)*(x390))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x391))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst20)*(((((IkReal(0.300000000000000))*(px)))+(((px)*(x391)))+(((IkReal(-1.00000000000000))*(px)*(x390)))))), ((gconst20)*(((((IkReal(-0.300000000000000))*(py)))+(((py)*(x390)))+(((IkReal(-1.00000000000000))*(py)*(x391)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x392=IKcos(j26);
IkReal x393=IKsin(j26);
IkReal x394=((py)*(x392));
IkReal x395=((px)*(x393));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x393)))+(((IkReal(-1.00000000000000))*(px)*(x392))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x395)))+(x394)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x395)))+(((IkReal(-0.600000000000000))*(x394)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x396=((IkReal(0.0300000000000000))*(sj29));
IkReal x397=((IkReal(0.313800000000000))*(cj29));
IkReal x398=((pz)*(sj27));
if( IKabs(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x396)))+(((px)*(x398)))+(((IkReal(-1.00000000000000))*(px)*(x397))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x398)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x397)))+(((IkReal(-1.00000000000000))*(py)*(x396))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst13)*(((((IkReal(-0.300000000000000))*(px)))+(((px)*(x396)))+(((px)*(x398)))+(((IkReal(-1.00000000000000))*(px)*(x397)))))), ((gconst13)*(((((IkReal(-1.00000000000000))*(py)*(x398)))+(((IkReal(0.300000000000000))*(py)))+(((py)*(x397)))+(((IkReal(-1.00000000000000))*(py)*(x396)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x399=IKsin(j26);
IkReal x400=IKcos(j26);
IkReal x401=((IkReal(0.313800000000000))*(cj29));
IkReal x402=((IkReal(0.0300000000000000))*(cj29));
IkReal x403=((pz)*(sj27));
IkReal x404=((IkReal(0.0600000000000000))*(sj27));
IkReal x405=((cj27)*(pz));
IkReal x406=((IkReal(0.313800000000000))*(sj29));
IkReal x407=((IkReal(0.0300000000000000))*(sj29));
IkReal x408=((px)*(x399));
IkReal x409=((py)*(x400));
IkReal x410=((cj27)*(x408));
IkReal x411=((IkReal(1.00000000000000))*(x409));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x399)))+(((IkReal(-1.00000000000000))*(px)*(x400))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj27)*(x411)))+(x401)+(x410)+(((IkReal(-1.00000000000000))*(x403)))+(((IkReal(-1.00000000000000))*(x407))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj27)*(x408)))+(((IkReal(-1.00000000000000))*(sj27)*(x411)))+(x405)+(((IkReal(-1.00000000000000))*(x402)))+(((IkReal(-1.00000000000000))*(x406))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj27)))+(((IkReal(-1.00000000000000))*(cj27)*(x407)))+(((IkReal(-1.00000000000000))*(sj27)*(x406)))+(((IkReal(-1.00000000000000))*(sj27)*(x402)))+(x408)+(((cj27)*(x401)))+(((IkReal(-1.00000000000000))*(x411)))+(((IkReal(0.300000000000000))*(cj27))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x405)))+(((x404)*(x409)))+(((IkReal(0.600000000000000))*(cj27)*(x409)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x404)*(x408)))+(((IkReal(0.600000000000000))*(x403)))+(((IkReal(-0.600000000000000))*(x410))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x412=((cj27)*(pz));
IkReal x413=((IkReal(0.0300000000000000))*(cj29));
IkReal x414=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst12)*(((((px)*(x413)))+(((px)*(x414)))+(((IkReal(-1.00000000000000))*(px)*(x412)))+(((IkReal(-0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((py)*(x412)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x413)))+(((IkReal(-1.00000000000000))*(py)*(x414))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst12)*(((((px)*(x413)))+(((px)*(x414)))+(((IkReal(-1.00000000000000))*(px)*(x412)))+(((IkReal(-0.0300000000000000))*(px)))))), ((gconst12)*(((((py)*(x412)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x413)))+(((IkReal(-1.00000000000000))*(py)*(x414)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x415=IKsin(j26);
IkReal x416=IKcos(j26);
IkReal x417=((IkReal(0.313800000000000))*(cj29));
IkReal x418=((IkReal(0.0300000000000000))*(cj29));
IkReal x419=((pz)*(sj27));
IkReal x420=((IkReal(0.0600000000000000))*(sj27));
IkReal x421=((cj27)*(pz));
IkReal x422=((IkReal(0.313800000000000))*(sj29));
IkReal x423=((IkReal(0.0300000000000000))*(sj29));
IkReal x424=((px)*(x415));
IkReal x425=((py)*(x416));
IkReal x426=((cj27)*(x424));
IkReal x427=((IkReal(1.00000000000000))*(x425));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x415)))+(((IkReal(-1.00000000000000))*(px)*(x416))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x423)))+(x417)+(x426)+(((IkReal(-1.00000000000000))*(cj27)*(x427)))+(((IkReal(-1.00000000000000))*(x419))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj27)*(x424)))+(((IkReal(-1.00000000000000))*(sj27)*(x427)))+(((IkReal(-1.00000000000000))*(x422)))+(x421)+(((IkReal(-1.00000000000000))*(x418))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj27)))+(((IkReal(-1.00000000000000))*(sj27)*(x422)))+(((IkReal(-1.00000000000000))*(x427)))+(((cj27)*(x417)))+(((IkReal(-1.00000000000000))*(sj27)*(x418)))+(x424)+(((IkReal(-1.00000000000000))*(cj27)*(x423)))+(((IkReal(0.300000000000000))*(cj27))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x420)*(x425)))+(((IkReal(-1.00000000000000))*(x420)*(x424)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(cj27)*(x425)))+(((IkReal(0.600000000000000))*(x419)))+(((IkReal(-0.0600000000000000))*(x421)))+(((IkReal(-0.600000000000000))*(x426))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x428=((IkReal(0.0300000000000000))*(sj28));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((((IkReal(-0.313800000000000))*(sj28)*(sj29)))+(((IkReal(-1.00000000000000))*(pz)))+(x428)+(((IkReal(-1.00000000000000))*(cj29)*(x428))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst22;
gconst22=IKsign(((((sj28)*((px)*(px))))+(((sj28)*((py)*(py))))));
dummyeval[0]=((((sj28)*((px)*(px))))+(((sj28)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
gconst23=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x429=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x429;
evalcond[3]=x429;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x430=((IkReal(0.0188280000000000))*(cj29));
IkReal x431=((IkReal(1.00000000000000))*(pp));
IkReal x432=((IkReal(0.00180000000000000))*(sj29));
IkReal x433=((IkReal(0.188280000000000))*(cj29));
IkReal x434=((IkReal(0.0180000000000000))*(py));
IkReal x435=((IkReal(0.0180000000000000))*(px));
if( IKabs(((gconst25)*(((((px)*(x430)))+(((py)*(x433)))+(x435)+(((IkReal(-1.00000000000000))*(sj29)*(x434)))+(((IkReal(-1.00000000000000))*(py)*(x431)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(x434)))+(((px)*(x433)))+(((py)*(x432)))+(((IkReal(-1.00000000000000))*(sj29)*(x435)))+(((IkReal(-1.00000000000000))*(py)*(x430)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x431))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst25)*(((((px)*(x430)))+(((py)*(x433)))+(x435)+(((IkReal(-1.00000000000000))*(sj29)*(x434)))+(((IkReal(-1.00000000000000))*(py)*(x431)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x432)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(x434)))+(((px)*(x433)))+(((py)*(x432)))+(((IkReal(-1.00000000000000))*(sj29)*(x435)))+(((IkReal(-1.00000000000000))*(py)*(x430)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x431)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x436=IKsin(j26);
IkReal x437=IKcos(j26);
IkReal x438=((py)*(x436));
IkReal x439=((px)*(x436));
IkReal x440=((IkReal(1.00000000000000))*(x437));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x438)))+(((IkReal(-0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(px)*(x440))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x439)+(((IkReal(-1.00000000000000))*(py)*(x440)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x439)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x438)))+(((IkReal(0.600000000000000))*(py)*(x437)))+(((IkReal(0.0600000000000000))*(px)*(x437))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x441=((IkReal(0.0300000000000000))*(px));
IkReal x442=((cj29)*(py));
IkReal x443=((IkReal(0.313800000000000))*(px));
IkReal x444=((py)*(sj29));
if( IKabs(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x444)))+(((sj29)*(x441)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj29)*(x443)))+(((IkReal(-0.0300000000000000))*(x442))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((IkReal(0.300000000000000))*(py)))+(x441)+(((IkReal(0.313800000000000))*(x442)))+(((IkReal(-1.00000000000000))*(sj29)*(x443)))+(((IkReal(-1.00000000000000))*(cj29)*(x441)))+(((IkReal(-0.0300000000000000))*(x444))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst24)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x444)))+(((sj29)*(x441)))+(((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj29)*(x443)))+(((IkReal(-0.0300000000000000))*(x442)))))), ((gconst24)*(((((IkReal(0.300000000000000))*(py)))+(x441)+(((IkReal(0.313800000000000))*(x442)))+(((IkReal(-1.00000000000000))*(sj29)*(x443)))+(((IkReal(-1.00000000000000))*(cj29)*(x441)))+(((IkReal(-0.0300000000000000))*(x444)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x445=IKsin(j26);
IkReal x446=IKcos(j26);
IkReal x447=((py)*(x445));
IkReal x448=((px)*(x445));
IkReal x449=((IkReal(1.00000000000000))*(x446));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x447)))+(((IkReal(-0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(px)*(x449))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x448)+(((IkReal(-1.00000000000000))*(py)*(x449)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x448)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x447)))+(((IkReal(0.600000000000000))*(py)*(x446)))+(((IkReal(0.0600000000000000))*(px)*(x446))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j28, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst26;
gconst26=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst27;
gconst27=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x450=((IkReal(0.0188280000000000))*(cj29));
IkReal x451=((IkReal(1.00000000000000))*(pp));
IkReal x452=((py)*(sj29));
IkReal x453=((IkReal(0.0180000000000000))*(px));
IkReal x454=((IkReal(0.188280000000000))*(cj29));
if( IKabs(((gconst27)*(((((IkReal(-0.0180000000000000))*(x452)))+(((IkReal(-1.00000000000000))*(x453)))+(((IkReal(-1.00000000000000))*(py)*(x451)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x450)))+(((py)*(x454)))+(((IkReal(0.00180000000000000))*(px)*(sj29))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst27)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj29)*(x453)))+(((IkReal(-0.00180000000000000))*(x452)))+(((px)*(x454)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x451)))+(((py)*(x450))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst27)*(((((IkReal(-0.0180000000000000))*(x452)))+(((IkReal(-1.00000000000000))*(x453)))+(((IkReal(-1.00000000000000))*(py)*(x451)))+(((IkReal(0.188470440000000))*(py)))+(((IkReal(-1.00000000000000))*(px)*(x450)))+(((py)*(x454)))+(((IkReal(0.00180000000000000))*(px)*(sj29)))))), ((gconst27)*(((((IkReal(0.0180000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj29)*(x453)))+(((IkReal(-0.00180000000000000))*(x452)))+(((px)*(x454)))+(((IkReal(0.188470440000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x451)))+(((py)*(x450)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x455=IKsin(j26);
IkReal x456=IKcos(j26);
IkReal x457=((py)*(x455));
IkReal x458=((px)*(x455));
IkReal x459=((IkReal(1.00000000000000))*(x456));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x457)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(px)*(x459))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(py)*(x459)))+(x458)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(px)*(x456)))+(((IkReal(-0.600000000000000))*(x458)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x457)))+(((IkReal(0.600000000000000))*(py)*(x456))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x460=((IkReal(0.0300000000000000))*(sj29));
IkReal x461=((cj29)*(py));
IkReal x462=((cj29)*(px));
IkReal x463=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x462)))+(((IkReal(0.0300000000000000))*(x461)))+(((px)*(x460)))+(((py)*(x463)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(0.313800000000000))*(x461)))+(((IkReal(-1.00000000000000))*(py)*(x460)))+(((IkReal(0.0300000000000000))*(x462)))+(((px)*(x463)))+(((IkReal(-0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst26)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-0.313800000000000))*(x462)))+(((IkReal(0.0300000000000000))*(x461)))+(((px)*(x460)))+(((py)*(x463)))+(((IkReal(-0.0300000000000000))*(py)))))), ((gconst26)*(((((IkReal(0.300000000000000))*(py)))+(((IkReal(0.313800000000000))*(x461)))+(((IkReal(-1.00000000000000))*(py)*(x460)))+(((IkReal(0.0300000000000000))*(x462)))+(((px)*(x463)))+(((IkReal(-0.0300000000000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x464=IKsin(j26);
IkReal x465=IKcos(j26);
IkReal x466=((py)*(x464));
IkReal x467=((px)*(x464));
IkReal x468=((IkReal(1.00000000000000))*(x465));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x466)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(px)*(x468)))+(((IkReal(0.0300000000000000))*(cj29))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(py)*(x468)))+(x467)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(px)*(x465)))+(((IkReal(-0.600000000000000))*(x467)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x466)))+(((IkReal(0.600000000000000))*(py)*(x465))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x469=((IkReal(0.0300000000000000))*(sj29));
IkReal x470=((IkReal(0.313800000000000))*(px));
IkReal x471=((cj28)*(sj29));
IkReal x472=((IkReal(0.313800000000000))*(py));
IkReal x473=((IkReal(0.0300000000000000))*(cj28));
if( IKabs(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj29)*(py)*(x473)))+(((IkReal(-1.00000000000000))*(cj29)*(x470)))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((py)*(x473)))+(((px)*(x469))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(0.300000000000000))*(py)))+(((cj29)*(x472)))+(((IkReal(-1.00000000000000))*(py)*(x469)))+(((IkReal(-1.00000000000000))*(cj29)*(px)*(x473)))+(((IkReal(-1.00000000000000))*(x470)*(x471)))+(((px)*(x473))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst23)*(((((IkReal(-0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj29)*(py)*(x473)))+(((IkReal(-1.00000000000000))*(cj29)*(x470)))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((py)*(x473)))+(((px)*(x469)))))), ((gconst23)*(((((IkReal(0.300000000000000))*(py)))+(((cj29)*(x472)))+(((IkReal(-1.00000000000000))*(py)*(x469)))+(((IkReal(-1.00000000000000))*(cj29)*(px)*(x473)))+(((IkReal(-1.00000000000000))*(x470)*(x471)))+(((px)*(x473)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x474=IKsin(j26);
IkReal x475=IKcos(j26);
IkReal x476=((IkReal(0.0600000000000000))*(cj28));
IkReal x477=((IkReal(0.0300000000000000))*(cj29));
IkReal x478=((pz)*(sj28));
IkReal x479=((IkReal(0.313800000000000))*(sj29));
IkReal x480=((IkReal(1.00000000000000))*(cj28));
IkReal x481=((px)*(x475));
IkReal x482=((py)*(x475));
IkReal x483=((py)*(x474));
IkReal x484=((px)*(x474));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj28)*(x477)))+(((IkReal(-1.00000000000000))*(cj28)*(x479)))+(((IkReal(-1.00000000000000))*(x481)))+(((IkReal(-1.00000000000000))*(x483)))+(((IkReal(0.0300000000000000))*(cj28))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x482)))+(x484)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((((IkReal(-1.00000000000000))*(pz)*(x480)))+(((sj28)*(x481)))+(((sj28)*(x483))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x477)))+(((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-1.00000000000000))*(x478)))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((IkReal(-1.00000000000000))*(x480)*(x483))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x476)*(x483)))+(((x476)*(x481)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x482)))+(((IkReal(0.0600000000000000))*(x478)))+(((IkReal(-0.600000000000000))*(x484))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x485=((px)*(sj28));
IkReal x486=((IkReal(0.0300000000000000))*(sj29));
IkReal x487=((cj28)*(pz));
IkReal x488=((py)*(sj28));
IkReal x489=((IkReal(0.313800000000000))*(cj29));
if( IKabs(((gconst22)*(((((x485)*(x486)))+(((py)*(x487)))+(((IkReal(-0.300000000000000))*(x485)))+(((IkReal(-1.00000000000000))*(x485)*(x489))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((IkReal(-1.00000000000000))*(x486)*(x488)))+(((x488)*(x489)))+(((px)*(x487)))+(((IkReal(0.300000000000000))*(x488))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst22)*(((((x485)*(x486)))+(((py)*(x487)))+(((IkReal(-0.300000000000000))*(x485)))+(((IkReal(-1.00000000000000))*(x485)*(x489)))))), ((gconst22)*(((((IkReal(-1.00000000000000))*(x486)*(x488)))+(((x488)*(x489)))+(((px)*(x487)))+(((IkReal(0.300000000000000))*(x488)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x490=IKsin(j26);
IkReal x491=IKcos(j26);
IkReal x492=((IkReal(0.0600000000000000))*(cj28));
IkReal x493=((IkReal(0.0300000000000000))*(cj29));
IkReal x494=((pz)*(sj28));
IkReal x495=((IkReal(0.313800000000000))*(sj29));
IkReal x496=((IkReal(1.00000000000000))*(cj28));
IkReal x497=((px)*(x491));
IkReal x498=((py)*(x491));
IkReal x499=((py)*(x490));
IkReal x500=((px)*(x490));
evalcond[0]=((((IkReal(-1.00000000000000))*(x497)))+(((IkReal(-1.00000000000000))*(x499)))+(((IkReal(-1.00000000000000))*(cj28)*(x493)))+(((IkReal(-1.00000000000000))*(cj28)*(x495)))+(((IkReal(0.0300000000000000))*(cj28))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x498)))+(x500)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((((sj28)*(x499)))+(((sj28)*(x497)))+(((IkReal(-1.00000000000000))*(pz)*(x496))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x493)))+(((IkReal(-1.00000000000000))*(x495)))+(((IkReal(-1.00000000000000))*(x496)*(x497)))+(((IkReal(-1.00000000000000))*(x496)*(x499)))+(((IkReal(-1.00000000000000))*(x494))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x494)))+(((IkReal(-0.600000000000000))*(x500)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.600000000000000))*(x498)))+(((x492)*(x497)))+(((x492)*(x499))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x501=((IkReal(0.0300000000000000))*(sj28));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j27, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x501)))+(((cj29)*(x501)))+(((IkReal(0.313800000000000))*(sj28)*(sj29)))+(((IkReal(-1.00000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
gconst28=IKsign(((((sj28)*((px)*(px))))+(((sj28)*((py)*(py))))));
dummyeval[0]=((((sj28)*((px)*(px))))+(((sj28)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=pz;
evalcond[3]=((IkReal(-1.00000000000000))*(pz));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst31;
gconst31=IKsign(((((IkReal(0.0600000000000000))*((py)*(py))))+(((IkReal(0.0600000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x502=((IkReal(0.0188280000000000))*(cj29));
IkReal x503=((IkReal(0.0180000000000000))*(py));
IkReal x504=((IkReal(0.188280000000000))*(cj29));
IkReal x505=((IkReal(0.00180000000000000))*(sj29));
IkReal x506=((IkReal(0.0180000000000000))*(px));
if( IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x504)))+(((sj29)*(x503)))+(x506)+(((px)*(x502)))+(((IkReal(-1.00000000000000))*(px)*(x505)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x502)))+(((IkReal(-1.00000000000000))*(x503)))+(((sj29)*(x506)))+(((py)*(x505)))+(((IkReal(-1.00000000000000))*(px)*(x504)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x504)))+(((sj29)*(x503)))+(x506)+(((px)*(x502)))+(((IkReal(-1.00000000000000))*(px)*(x505)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst31)*(((((IkReal(-1.00000000000000))*(py)*(x502)))+(((IkReal(-1.00000000000000))*(x503)))+(((sj29)*(x506)))+(((py)*(x505)))+(((IkReal(-1.00000000000000))*(px)*(x504)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x507=IKcos(j26);
IkReal x508=IKsin(j26);
IkReal x509=((py)*(x507));
IkReal x510=((px)*(x508));
IkReal x511=((py)*(x508));
IkReal x512=((px)*(x507));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x511)))+(((IkReal(-1.00000000000000))*(x512)))+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x510)))+(x509)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x510)))+(((IkReal(0.0600000000000000))*(x511)))+(((IkReal(0.0600000000000000))*(x512)))+(((IkReal(-0.600000000000000))*(x509)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x513=((IkReal(0.0300000000000000))*(sj29));
IkReal x514=((cj29)*(py));
IkReal x515=((cj29)*(px));
IkReal x516=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst30)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x513)))+(((IkReal(-0.0300000000000000))*(x514)))+(((IkReal(0.313800000000000))*(x515)))+(((IkReal(-1.00000000000000))*(py)*(x516)))+(((IkReal(0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(x514)))+(((IkReal(-1.00000000000000))*(px)*(x516)))+(((py)*(x513)))+(((IkReal(-0.0300000000000000))*(x515)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst30)*(((((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x513)))+(((IkReal(-0.0300000000000000))*(x514)))+(((IkReal(0.313800000000000))*(x515)))+(((IkReal(-1.00000000000000))*(py)*(x516)))+(((IkReal(0.0300000000000000))*(py)))))), ((gconst30)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(x514)))+(((IkReal(-1.00000000000000))*(px)*(x516)))+(((py)*(x513)))+(((IkReal(-0.0300000000000000))*(x515)))+(((IkReal(0.0300000000000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x517=IKcos(j26);
IkReal x518=IKsin(j26);
IkReal x519=((py)*(x517));
IkReal x520=((px)*(x518));
IkReal x521=((py)*(x518));
IkReal x522=((px)*(x517));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x521)))+(((IkReal(-1.00000000000000))*(x522)))+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x520)))+(x519)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.0600000000000000))*(x521)))+(((IkReal(0.0600000000000000))*(x522)))+(((IkReal(0.600000000000000))*(x520)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x519))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x523=((IkReal(-1.00000000000000))*(pz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j28, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x523;
evalcond[3]=x523;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst32;
gconst32=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst33;
gconst33=IKsign(((((IkReal(-0.0600000000000000))*((px)*(px))))+(((IkReal(-0.0600000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x524=((cj29)*(px));
IkReal x525=((IkReal(0.0180000000000000))*(py));
IkReal x526=((cj29)*(py));
IkReal x527=((IkReal(0.00180000000000000))*(sj29));
IkReal x528=((IkReal(0.0180000000000000))*(px));
if( IKabs(((gconst33)*(((((IkReal(-0.0188280000000000))*(x524)))+(((sj29)*(x525)))+(((IkReal(-1.00000000000000))*(x528)))+(((px)*(x527)))+(((IkReal(-0.188280000000000))*(x526)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((sj29)*(x528)))+(((IkReal(0.0188280000000000))*(x526)))+(((IkReal(-0.188280000000000))*(x524)))+(x525)+(((IkReal(-1.00000000000000))*(py)*(x527)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst33)*(((((IkReal(-0.0188280000000000))*(x524)))+(((sj29)*(x525)))+(((IkReal(-1.00000000000000))*(x528)))+(((px)*(x527)))+(((IkReal(-0.188280000000000))*(x526)))+(((pp)*(py)))+(((IkReal(-0.188470440000000))*(py)))))), ((gconst33)*(((((sj29)*(x528)))+(((IkReal(0.0188280000000000))*(x526)))+(((IkReal(-0.188280000000000))*(x524)))+(x525)+(((IkReal(-1.00000000000000))*(py)*(x527)))+(((pp)*(px)))+(((IkReal(-0.188470440000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x529=IKcos(j26);
IkReal x530=IKsin(j26);
IkReal x531=((py)*(x529));
IkReal x532=((px)*(x530));
IkReal x533=((py)*(x530));
IkReal x534=((px)*(x529));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x533)))+(((IkReal(-1.00000000000000))*(x534)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(0.0300000000000000))*(cj29))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x532)))+(x531)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x532)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x533)))+(((IkReal(-0.0600000000000000))*(x534)))+(((IkReal(-0.600000000000000))*(x531))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x535=((IkReal(0.0300000000000000))*(sj29));
IkReal x536=((cj29)*(py));
IkReal x537=((cj29)*(px));
IkReal x538=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst32)*(((((IkReal(0.0300000000000000))*(x536)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x535)))+(((IkReal(0.313800000000000))*(x537)))+(((IkReal(-0.0300000000000000))*(py)))+(((py)*(x538))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(x536)))+(((IkReal(0.0300000000000000))*(x537)))+(((px)*(x538)))+(((IkReal(-0.0300000000000000))*(px)))+(((py)*(x535))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst32)*(((((IkReal(0.0300000000000000))*(x536)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x535)))+(((IkReal(0.313800000000000))*(x537)))+(((IkReal(-0.0300000000000000))*(py)))+(((py)*(x538)))))), ((gconst32)*(((((IkReal(-0.300000000000000))*(py)))+(((IkReal(-0.313800000000000))*(x536)))+(((IkReal(0.0300000000000000))*(x537)))+(((px)*(x538)))+(((IkReal(-0.0300000000000000))*(px)))+(((py)*(x535)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x539=IKcos(j26);
IkReal x540=IKsin(j26);
IkReal x541=((py)*(x539));
IkReal x542=((px)*(x540));
IkReal x543=((py)*(x540));
IkReal x544=((px)*(x539));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x543)))+(((IkReal(-1.00000000000000))*(x544)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(0.0300000000000000))*(cj29))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x542)))+(x541)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x542)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x544)))+(((IkReal(-0.0600000000000000))*(x543)))+(((IkReal(-0.600000000000000))*(x541))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x545=((IkReal(0.0300000000000000))*(sj29));
IkReal x546=((IkReal(0.313800000000000))*(px));
IkReal x547=((cj28)*(sj29));
IkReal x548=((IkReal(0.313800000000000))*(py));
IkReal x549=((IkReal(0.0300000000000000))*(cj28));
if( IKabs(((gconst29)*(((((py)*(x549)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj29)*(py)*(x549)))+(((IkReal(-1.00000000000000))*(px)*(x545)))+(((IkReal(-1.00000000000000))*(x547)*(x548)))+(((cj29)*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((py)*(x545)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj29)*(px)*(x549)))+(((px)*(x549)))+(((IkReal(-1.00000000000000))*(cj29)*(x548)))+(((IkReal(-1.00000000000000))*(x546)*(x547))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst29)*(((((py)*(x549)))+(((IkReal(0.300000000000000))*(px)))+(((IkReal(-1.00000000000000))*(cj29)*(py)*(x549)))+(((IkReal(-1.00000000000000))*(px)*(x545)))+(((IkReal(-1.00000000000000))*(x547)*(x548)))+(((cj29)*(x546)))))), ((gconst29)*(((((py)*(x545)))+(((IkReal(-0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(cj29)*(px)*(x549)))+(((px)*(x549)))+(((IkReal(-1.00000000000000))*(cj29)*(x548)))+(((IkReal(-1.00000000000000))*(x546)*(x547)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x550=IKcos(j26);
IkReal x551=IKsin(j26);
IkReal x552=((IkReal(0.0600000000000000))*(cj28));
IkReal x553=((IkReal(0.0300000000000000))*(cj29));
IkReal x554=((pz)*(sj28));
IkReal x555=((IkReal(0.313800000000000))*(sj29));
IkReal x556=((IkReal(1.00000000000000))*(cj28));
IkReal x557=((px)*(x550));
IkReal x558=((py)*(x550));
IkReal x559=((py)*(x551));
IkReal x560=((px)*(x551));
evalcond[0]=((((IkReal(-1.00000000000000))*(x557)))+(((IkReal(-1.00000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(cj28)*(x553)))+(((IkReal(-1.00000000000000))*(cj28)*(x555)))+(((IkReal(0.0300000000000000))*(cj28))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(x558)+(((IkReal(-1.00000000000000))*(x560)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((((sj28)*(x559)))+(((sj28)*(x557)))+(((cj28)*(pz))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x556)*(x557)))+(((IkReal(-1.00000000000000))*(x556)*(x559)))+(((IkReal(-1.00000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(x555)))+(x554));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(x560)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.600000000000000))*(x558)))+(((x552)*(x557)))+(((x552)*(x559)))+(((IkReal(-0.0600000000000000))*(x554))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x561=((px)*(sj28));
IkReal x562=((IkReal(0.0300000000000000))*(sj29));
IkReal x563=((py)*(sj28));
IkReal x564=((IkReal(0.313800000000000))*(cj29));
IkReal x565=((IkReal(1.00000000000000))*(cj28)*(pz));
if( IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(py)*(x565)))+(((x561)*(x564)))+(((IkReal(0.300000000000000))*(x561)))+(((IkReal(-1.00000000000000))*(x561)*(x562))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((x562)*(x563)))+(((IkReal(-1.00000000000000))*(x563)*(x564)))+(((IkReal(-0.300000000000000))*(x563)))+(((IkReal(-1.00000000000000))*(px)*(x565))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst28)*(((((IkReal(-1.00000000000000))*(py)*(x565)))+(((x561)*(x564)))+(((IkReal(0.300000000000000))*(x561)))+(((IkReal(-1.00000000000000))*(x561)*(x562)))))), ((gconst28)*(((((x562)*(x563)))+(((IkReal(-1.00000000000000))*(x563)*(x564)))+(((IkReal(-0.300000000000000))*(x563)))+(((IkReal(-1.00000000000000))*(px)*(x565)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x566=IKcos(j26);
IkReal x567=IKsin(j26);
IkReal x568=((IkReal(0.0600000000000000))*(cj28));
IkReal x569=((IkReal(0.0300000000000000))*(cj29));
IkReal x570=((pz)*(sj28));
IkReal x571=((IkReal(0.313800000000000))*(sj29));
IkReal x572=((IkReal(1.00000000000000))*(cj28));
IkReal x573=((px)*(x566));
IkReal x574=((py)*(x566));
IkReal x575=((py)*(x567));
IkReal x576=((px)*(x567));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj28)*(x569)))+(((IkReal(-1.00000000000000))*(x573)))+(((IkReal(-1.00000000000000))*(x575)))+(((IkReal(0.0300000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(cj28)*(x571))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x576)))+(x574)+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[2]=((((cj28)*(pz)))+(((sj28)*(x575)))+(((sj28)*(x573))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x571)))+(x570)+(((IkReal(-1.00000000000000))*(x572)*(x575)))+(((IkReal(-1.00000000000000))*(x572)*(x573)))+(((IkReal(-1.00000000000000))*(x569))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(x574)))+(((IkReal(0.600000000000000))*(x576)))+(((IkReal(-0.0600000000000000))*(x570)))+(((IkReal(-1.00000000000000))*(pp)))+(((x568)*(x573)))+(((x568)*(x575))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x577=((IkReal(0.300000000000000))+(((IkReal(0.313800000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.0300000000000000))*(sj29))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x577;
evalcond[3]=x577;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x578=((IkReal(1.00000000000000))*(sj28));
gconst35=IKsign(((((IkReal(-1.00000000000000))*(x578)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x578)*((px)*(px))))));
IkReal x579=((IkReal(1.00000000000000))*(sj28));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x579)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x579)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x580=x577;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x580;
evalcond[3]=x580;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst37;
gconst37=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x581=((IkReal(50.0000000000000))*(pp));
IkReal x582=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x581)))+(((py)*(x582))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x582)))+(((IkReal(-1.00000000000000))*(px)*(x581))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst37)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x581)))+(((py)*(x582)))))), ((gconst37)*(((((IkReal(0.423522000000000))*(px)))+(((px)*(x582)))+(((IkReal(-1.00000000000000))*(px)*(x581)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x583=IKcos(j26);
IkReal x584=IKsin(j26);
IkReal x585=((IkReal(1.00000000000000))*(px));
IkReal x586=((py)*(x584));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x586)))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x583)*(x585)))+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x584)*(x585)))+(((py)*(x583))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x586)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x583))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x587=((IkReal(0.0300000000000000))*(cj29));
IkReal x588=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x587)))+(((IkReal(-1.00000000000000))*(py)*(x588)))+(((IkReal(0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x588)))+(((IkReal(-1.00000000000000))*(px)*(x587)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst36)*(((((IkReal(-1.00000000000000))*(py)*(x587)))+(((IkReal(-1.00000000000000))*(py)*(x588)))+(((IkReal(0.0300000000000000))*(py)))))), ((gconst36)*(((((IkReal(-1.00000000000000))*(px)*(x588)))+(((IkReal(-1.00000000000000))*(px)*(x587)))+(((IkReal(0.0300000000000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x589=IKcos(j26);
IkReal x590=IKsin(j26);
IkReal x591=((IkReal(1.00000000000000))*(px));
IkReal x592=((py)*(x590));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x589)*(x591)))+(((IkReal(-1.00000000000000))*(x592)))+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x590)*(x591)))+(((py)*(x589))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x589)))+(((IkReal(0.0600000000000000))*(x592))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x593=x577;
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j28, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x593;
evalcond[3]=x593;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst38;
gconst38=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x594=((IkReal(50.0000000000000))*(pp));
IkReal x595=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x595)))+(((IkReal(-1.00000000000000))*(py)*(x594))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x594)))+(((px)*(x595))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst39)*(((((IkReal(0.423522000000000))*(py)))+(((py)*(x595)))+(((IkReal(-1.00000000000000))*(py)*(x594)))))), ((gconst39)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x594)))+(((px)*(x595)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x596=IKsin(j26);
IkReal x597=IKcos(j26);
IkReal x598=((py)*(x596));
IkReal x599=((IkReal(1.00000000000000))*(x597));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(px)*(x599)))+(((IkReal(-1.00000000000000))*(x598)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(0.0300000000000000))*(cj29))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x599)))+(((px)*(x596))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-0.0600000000000000))*(px)*(x597)))+(((IkReal(-0.0600000000000000))*(x598)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x600=((IkReal(0.0300000000000000))*(cj29));
IkReal x601=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst38)*(((((py)*(x600)))+(((py)*(x601)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((px)*(x600)))+(((px)*(x601)))+(((IkReal(-0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst38)*(((((py)*(x600)))+(((py)*(x601)))+(((IkReal(-0.0300000000000000))*(py)))))), ((gconst38)*(((((px)*(x600)))+(((px)*(x601)))+(((IkReal(-0.0300000000000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x602=IKsin(j26);
IkReal x603=IKcos(j26);
IkReal x604=((py)*(x602));
IkReal x605=((IkReal(1.00000000000000))*(x603));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x604)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(px)*(x605))));
evalcond[1]=((((px)*(x602)))+(((IkReal(-1.00000000000000))*(py)*(x605))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x604)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x603))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x606=(sj28)*(sj28);
IkReal x607=((IkReal(0.313800000000000))*(sj29));
IkReal x608=((IkReal(0.0300000000000000))*(py));
IkReal x609=((cj28)*(sj28));
IkReal x610=((IkReal(0.0300000000000000))*(cj29));
IkReal x611=((px)*(x606));
if( IKabs(((gconst35)*(((((IkReal(-0.0300000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(x608)*(x609)))+(((py)*(x607)*(x609)))+(((x607)*(x611)))+(((cj29)*(x608)*(x609)))+(((x610)*(x611))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((px)*(x607)*(x609)))+(((IkReal(-0.0300000000000000))*(px)*(x609)))+(((IkReal(-1.00000000000000))*(cj29)*(x606)*(x608)))+(((IkReal(-1.00000000000000))*(py)*(x606)*(x607)))+(((px)*(x609)*(x610)))+(((x606)*(x608))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst35)*(((((IkReal(-0.0300000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(x608)*(x609)))+(((py)*(x607)*(x609)))+(((x607)*(x611)))+(((cj29)*(x608)*(x609)))+(((x610)*(x611)))))), ((gconst35)*(((((px)*(x607)*(x609)))+(((IkReal(-0.0300000000000000))*(px)*(x609)))+(((IkReal(-1.00000000000000))*(cj29)*(x606)*(x608)))+(((IkReal(-1.00000000000000))*(py)*(x606)*(x607)))+(((px)*(x609)*(x610)))+(((x606)*(x608)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x612=IKcos(j26);
IkReal x613=IKsin(j26);
IkReal x614=((IkReal(0.0600000000000000))*(px));
IkReal x615=((IkReal(0.0300000000000000))*(cj28));
IkReal x616=((px)*(sj28));
IkReal x617=((IkReal(0.313800000000000))*(sj29));
IkReal x618=((IkReal(0.0300000000000000))*(cj29));
IkReal x619=((IkReal(1.00000000000000))*(px));
IkReal x620=((IkReal(1.00000000000000))*(cj28));
IkReal x621=((cj28)*(x612));
IkReal x622=((py)*(x612));
IkReal x623=((py)*(x613));
IkReal x624=((px)*(x613));
evalcond[0]=((((IkReal(-1.00000000000000))*(x612)*(x619)))+(((IkReal(-1.00000000000000))*(cj28)*(x617)))+(((IkReal(-1.00000000000000))*(cj29)*(x615)))+(x615)+(((IkReal(-1.00000000000000))*(x623))));
evalcond[1]=((((py)*(x621)))+(((IkReal(-1.00000000000000))*(cj28)*(x613)*(x619)))+(((x612)*(x616)))+(((sj28)*(x623))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x620)*(x623)))+(((IkReal(-1.00000000000000))*(x613)*(x616)))+(((sj28)*(x622)))+(((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(x618)))+(((IkReal(-1.00000000000000))*(x619)*(x621))));
evalcond[3]=((x624)+(((IkReal(-0.0300000000000000))*(sj28)))+(((sj28)*(x618)))+(((sj28)*(x617)))+(((IkReal(-1.00000000000000))*(x622))));
evalcond[4]=((IkReal(0.00847044000000000))+(((sj28)*(x613)*(x614)))+(((x614)*(x621)))+(((IkReal(0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(cj28)*(x623)))+(((IkReal(-0.0600000000000000))*(sj28)*(x622)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x625=((IkReal(0.313800000000000))*(sj29));
IkReal x626=((cj28)*(px));
IkReal x627=((cj28)*(py));
IkReal x628=((px)*(sj28));
IkReal x629=((IkReal(0.0300000000000000))*(py)*(sj28));
IkReal x630=((IkReal(0.0300000000000000))*(cj29)*(px));
if( IKabs(((gconst34)*(((((IkReal(-0.0300000000000000))*(cj29)*(x627)))+(((IkReal(-0.0300000000000000))*(cj29)*(x628)))+(((IkReal(0.0300000000000000))*(x627)))+(((IkReal(0.0300000000000000))*(x628)))+(((IkReal(-1.00000000000000))*(x625)*(x627)))+(((IkReal(-1.00000000000000))*(x625)*(x628))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-0.0300000000000000))*(cj29)*(x626)))+(((IkReal(0.0300000000000000))*(x626)))+(((IkReal(-1.00000000000000))*(x629)))+(((py)*(sj28)*(x625)))+(((IkReal(-1.00000000000000))*(x625)*(x626)))+(((cj29)*(x629))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst34)*(((((IkReal(-0.0300000000000000))*(cj29)*(x627)))+(((IkReal(-0.0300000000000000))*(cj29)*(x628)))+(((IkReal(0.0300000000000000))*(x627)))+(((IkReal(0.0300000000000000))*(x628)))+(((IkReal(-1.00000000000000))*(x625)*(x627)))+(((IkReal(-1.00000000000000))*(x625)*(x628)))))), ((gconst34)*(((((IkReal(-0.0300000000000000))*(cj29)*(x626)))+(((IkReal(0.0300000000000000))*(x626)))+(((IkReal(-1.00000000000000))*(x629)))+(((py)*(sj28)*(x625)))+(((IkReal(-1.00000000000000))*(x625)*(x626)))+(((cj29)*(x629)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x631=IKcos(j26);
IkReal x632=IKsin(j26);
IkReal x633=((IkReal(0.0600000000000000))*(px));
IkReal x634=((IkReal(0.0300000000000000))*(cj28));
IkReal x635=((px)*(sj28));
IkReal x636=((IkReal(0.313800000000000))*(sj29));
IkReal x637=((IkReal(0.0300000000000000))*(cj29));
IkReal x638=((IkReal(1.00000000000000))*(px));
IkReal x639=((IkReal(1.00000000000000))*(cj28));
IkReal x640=((cj28)*(x631));
IkReal x641=((py)*(x631));
IkReal x642=((py)*(x632));
IkReal x643=((px)*(x632));
evalcond[0]=((((IkReal(-1.00000000000000))*(x631)*(x638)))+(((IkReal(-1.00000000000000))*(x642)))+(x634)+(((IkReal(-1.00000000000000))*(cj29)*(x634)))+(((IkReal(-1.00000000000000))*(cj28)*(x636))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj28)*(x632)*(x638)))+(((sj28)*(x642)))+(((py)*(x640)))+(((x631)*(x635))));
evalcond[2]=((IkReal(0.0300000000000000))+(((sj28)*(x641)))+(((IkReal(-1.00000000000000))*(x639)*(x642)))+(((IkReal(-1.00000000000000))*(x637)))+(((IkReal(-1.00000000000000))*(x636)))+(((IkReal(-1.00000000000000))*(x632)*(x635)))+(((IkReal(-1.00000000000000))*(x638)*(x640))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x641)))+(((sj28)*(x636)))+(((sj28)*(x637)))+(x643)+(((IkReal(-0.0300000000000000))*(sj28))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)))+(((sj28)*(x632)*(x633)))+(((IkReal(0.0600000000000000))*(cj28)*(x642)))+(((IkReal(-1.00000000000000))*(pp)))+(((x633)*(x640)))+(((IkReal(-0.0600000000000000))*(sj28)*(x641))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x644=((IkReal(0.0300000000000000))*(sj29));
IkReal x645=((IkReal(0.313800000000000))*(cj29));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j27)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x644)))+(pz)+(x645));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x645)))+(x644));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst40;
gconst40=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst41;
IkReal x646=((IkReal(1.00000000000000))*(sj28));
gconst41=IKsign(((((IkReal(-1.00000000000000))*(x646)*((py)*(py))))+(((IkReal(-1.00000000000000))*(x646)*((px)*(px))))));
IkReal x647=((IkReal(1.00000000000000))*(sj28));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x647)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x647)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x648=((IkReal(0.0300000000000000))*(sj29));
IkReal x649=((IkReal(0.313800000000000))*(cj29));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x648)))+(pz)+(x649));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x649)))+(x648));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst42;
gconst42=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst43;
gconst43=IKsign(((((IkReal(-3.00000000000000))*((px)*(px))))+(((IkReal(-3.00000000000000))*((py)*(py))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((px)*(px))))+(((IkReal(-1.00000000000000))*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x650=((IkReal(50.0000000000000))*(pp));
IkReal x651=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x651)))+(((IkReal(-1.00000000000000))*(py)*(x650))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x651)))+(((IkReal(-1.00000000000000))*(px)*(x650))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst43)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x651)))+(((IkReal(-1.00000000000000))*(py)*(x650)))))), ((gconst43)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x651)))+(((IkReal(-1.00000000000000))*(px)*(x650)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x652=IKsin(j26);
IkReal x653=IKcos(j26);
IkReal x654=((py)*(x652));
IkReal x655=((IkReal(1.00000000000000))*(x653));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(px)*(x655)))+(((IkReal(-1.00000000000000))*(x654)))+(((IkReal(-0.313800000000000))*(sj29))));
evalcond[1]=((((px)*(x652)))+(((IkReal(-1.00000000000000))*(py)*(x655))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(0.0600000000000000))*(x654)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(px)*(x653))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x656=((IkReal(0.0300000000000000))*(cj29));
IkReal x657=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst42)*(((((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x657)))+(((IkReal(-1.00000000000000))*(py)*(x656))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x656)))+(((IkReal(-1.00000000000000))*(px)*(x657)))+(((IkReal(0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst42)*(((((IkReal(0.0300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x657)))+(((IkReal(-1.00000000000000))*(py)*(x656)))))), ((gconst42)*(((((IkReal(-1.00000000000000))*(px)*(x656)))+(((IkReal(-1.00000000000000))*(px)*(x657)))+(((IkReal(0.0300000000000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x658=IKsin(j26);
IkReal x659=IKcos(j26);
IkReal x660=((py)*(x658));
IkReal x661=((IkReal(1.00000000000000))*(x659));
evalcond[0]=((IkReal(0.0300000000000000))+(((IkReal(-0.0300000000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(x660)))+(((IkReal(-0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(px)*(x661))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x661)))+(((px)*(x658))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x660)))+(((IkReal(0.0600000000000000))*(px)*(x659))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x662=((IkReal(0.0300000000000000))*(sj29));
IkReal x663=((IkReal(0.313800000000000))*(cj29));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j28, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x662)))+(pz)+(x663));
evalcond[3]=((IkReal(-0.300000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x663)))+(x662));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst44;
gconst44=IKsign((((px)*(px))+((py)*(py))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(((((IkReal(3.00000000000000))*((py)*(py))))+(((IkReal(3.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x664=((IkReal(50.0000000000000))*(pp));
IkReal x665=((IkReal(30.0000000000000))*(pz));
if( IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x664)))+(((IkReal(-1.00000000000000))*(py)*(x665))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x664)))+(((IkReal(-1.00000000000000))*(px)*(x665))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst45)*(((((IkReal(0.423522000000000))*(py)))+(((IkReal(-1.00000000000000))*(py)*(x664)))+(((IkReal(-1.00000000000000))*(py)*(x665)))))), ((gconst45)*(((((IkReal(0.423522000000000))*(px)))+(((IkReal(-1.00000000000000))*(px)*(x664)))+(((IkReal(-1.00000000000000))*(px)*(x665)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x666=IKcos(j26);
IkReal x667=IKsin(j26);
IkReal x668=((IkReal(1.00000000000000))*(px));
IkReal x669=((py)*(x667));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x669)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x666)*(x668)))+(((IkReal(0.0300000000000000))*(cj29))));
evalcond[1]=((((py)*(x666)))+(((IkReal(-1.00000000000000))*(x667)*(x668))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(px)*(x666)))+(((IkReal(-0.0600000000000000))*(x669))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x670=((IkReal(0.0300000000000000))*(cj29));
IkReal x671=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst44)*(((((py)*(x671)))+(((py)*(x670)))+(((IkReal(-0.0300000000000000))*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((px)*(x670)))+(((px)*(x671)))+(((IkReal(-0.0300000000000000))*(px))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst44)*(((((py)*(x671)))+(((py)*(x670)))+(((IkReal(-0.0300000000000000))*(py)))))), ((gconst44)*(((((px)*(x670)))+(((px)*(x671)))+(((IkReal(-0.0300000000000000))*(px)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[3];
IkReal x672=IKcos(j26);
IkReal x673=IKsin(j26);
IkReal x674=((IkReal(1.00000000000000))*(px));
IkReal x675=((py)*(x673));
evalcond[0]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x675)))+(((IkReal(0.313800000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x672)*(x674)))+(((IkReal(0.0300000000000000))*(cj29))));
evalcond[1]=((((py)*(x672)))+(((IkReal(-1.00000000000000))*(x673)*(x674))));
evalcond[2]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(px)*(x672)))+(((IkReal(-0.600000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x675))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x676=(sj28)*(sj28);
IkReal x677=((IkReal(0.313800000000000))*(sj29));
IkReal x678=((IkReal(0.0300000000000000))*(py));
IkReal x679=((cj28)*(sj28));
IkReal x680=((IkReal(0.0300000000000000))*(cj29));
IkReal x681=((px)*(x676));
if( IKabs(((gconst41)*(((((py)*(x677)*(x679)))+(((IkReal(0.0300000000000000))*(x681)))+(((IkReal(-1.00000000000000))*(x678)*(x679)))+(((IkReal(-1.00000000000000))*(x680)*(x681)))+(((cj29)*(x678)*(x679)))+(((IkReal(-1.00000000000000))*(x677)*(x681))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((py)*(x676)*(x677)))+(((px)*(x679)*(x680)))+(((IkReal(-0.0300000000000000))*(px)*(x679)))+(((IkReal(-1.00000000000000))*(x676)*(x678)))+(((px)*(x677)*(x679)))+(((cj29)*(x676)*(x678))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst41)*(((((py)*(x677)*(x679)))+(((IkReal(0.0300000000000000))*(x681)))+(((IkReal(-1.00000000000000))*(x678)*(x679)))+(((IkReal(-1.00000000000000))*(x680)*(x681)))+(((cj29)*(x678)*(x679)))+(((IkReal(-1.00000000000000))*(x677)*(x681)))))), ((gconst41)*(((((py)*(x676)*(x677)))+(((px)*(x679)*(x680)))+(((IkReal(-0.0300000000000000))*(px)*(x679)))+(((IkReal(-1.00000000000000))*(x676)*(x678)))+(((px)*(x677)*(x679)))+(((cj29)*(x676)*(x678)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x682=IKcos(j26);
IkReal x683=IKsin(j26);
IkReal x684=((IkReal(0.0600000000000000))*(cj28));
IkReal x685=((IkReal(0.0300000000000000))*(cj29));
IkReal x686=((IkReal(0.0600000000000000))*(sj28));
IkReal x687=((IkReal(0.313800000000000))*(sj29));
IkReal x688=((IkReal(1.00000000000000))*(cj28));
IkReal x689=((px)*(x682));
IkReal x690=((py)*(x682));
IkReal x691=((px)*(x683));
IkReal x692=((py)*(x683));
evalcond[0]=((((IkReal(0.0300000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(x689)))+(((IkReal(-1.00000000000000))*(x692)))+(((IkReal(-1.00000000000000))*(cj28)*(x687)))+(((IkReal(-1.00000000000000))*(cj28)*(x685))));
evalcond[1]=((((cj28)*(x691)))+(((sj28)*(x692)))+(((sj28)*(x689)))+(((IkReal(-1.00000000000000))*(x688)*(x690))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x688)*(x689)))+(((sj28)*(x691)))+(((IkReal(-1.00000000000000))*(x687)))+(((IkReal(-1.00000000000000))*(x685)))+(((IkReal(-1.00000000000000))*(x688)*(x692)))+(((IkReal(-1.00000000000000))*(sj28)*(x690))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(sj28)*(x685)))+(((IkReal(-1.00000000000000))*(sj28)*(x687)))+(x691)+(((IkReal(-1.00000000000000))*(x690))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x686)*(x690)))+(((IkReal(-0.600000000000000))*(pz)))+(((x684)*(x692)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x686)*(x691)))+(((x684)*(x689))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x693=((IkReal(0.0300000000000000))*(cj29));
IkReal x694=((cj28)*(px));
IkReal x695=((py)*(sj28));
IkReal x696=((px)*(sj28));
IkReal x697=((IkReal(0.313800000000000))*(sj29));
IkReal x698=((cj28)*(py));
if( IKabs(((gconst40)*(((((x696)*(x697)))+(((IkReal(-1.00000000000000))*(x697)*(x698)))+(((IkReal(-1.00000000000000))*(x693)*(x698)))+(((IkReal(0.0300000000000000))*(x698)))+(((x693)*(x696)))+(((IkReal(-0.0300000000000000))*(x696))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(x693)*(x695)))+(((IkReal(-1.00000000000000))*(x693)*(x694)))+(((IkReal(0.0300000000000000))*(x695)))+(((IkReal(0.0300000000000000))*(x694)))+(((IkReal(-1.00000000000000))*(x695)*(x697)))+(((IkReal(-1.00000000000000))*(x694)*(x697))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst40)*(((((x696)*(x697)))+(((IkReal(-1.00000000000000))*(x697)*(x698)))+(((IkReal(-1.00000000000000))*(x693)*(x698)))+(((IkReal(0.0300000000000000))*(x698)))+(((x693)*(x696)))+(((IkReal(-0.0300000000000000))*(x696)))))), ((gconst40)*(((((IkReal(-1.00000000000000))*(x693)*(x695)))+(((IkReal(-1.00000000000000))*(x693)*(x694)))+(((IkReal(0.0300000000000000))*(x695)))+(((IkReal(0.0300000000000000))*(x694)))+(((IkReal(-1.00000000000000))*(x695)*(x697)))+(((IkReal(-1.00000000000000))*(x694)*(x697)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[5];
IkReal x699=IKcos(j26);
IkReal x700=IKsin(j26);
IkReal x701=((IkReal(0.0600000000000000))*(cj28));
IkReal x702=((IkReal(0.0300000000000000))*(cj29));
IkReal x703=((IkReal(0.0600000000000000))*(sj28));
IkReal x704=((IkReal(0.313800000000000))*(sj29));
IkReal x705=((IkReal(1.00000000000000))*(cj28));
IkReal x706=((px)*(x699));
IkReal x707=((py)*(x699));
IkReal x708=((px)*(x700));
IkReal x709=((py)*(x700));
evalcond[0]=((((IkReal(-1.00000000000000))*(x706)))+(((IkReal(-1.00000000000000))*(x709)))+(((IkReal(-1.00000000000000))*(cj28)*(x702)))+(((IkReal(-1.00000000000000))*(cj28)*(x704)))+(((IkReal(0.0300000000000000))*(cj28))));
evalcond[1]=((((cj28)*(x708)))+(((sj28)*(x709)))+(((sj28)*(x706)))+(((IkReal(-1.00000000000000))*(x705)*(x707))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(sj28)*(x707)))+(((sj28)*(x708)))+(((IkReal(-1.00000000000000))*(x702)))+(((IkReal(-1.00000000000000))*(x704)))+(((IkReal(-1.00000000000000))*(x705)*(x706)))+(((IkReal(-1.00000000000000))*(x705)*(x709))));
evalcond[3]=((((IkReal(0.0300000000000000))*(sj28)))+(((IkReal(-1.00000000000000))*(x707)))+(x708)+(((IkReal(-1.00000000000000))*(sj28)*(x702)))+(((IkReal(-1.00000000000000))*(sj28)*(x704))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x701)*(x706)))+(((x701)*(x709)))+(((IkReal(-0.600000000000000))*(pz)))+(((x703)*(x707)))+(((IkReal(-1.00000000000000))*(x703)*(x708)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x710=(cj28)*(cj28);
IkReal x711=((IkReal(0.313800000000000))*(sj29));
IkReal x712=((IkReal(0.0300000000000000))*(cj29));
IkReal x713=((cj28)*(px));
IkReal x714=((cj27)*(pz));
IkReal x715=((cj28)*(py));
IkReal x716=((IkReal(0.0300000000000000))*(sj28));
IkReal x717=((px)*(sj27)*(x710));
IkReal x718=((py)*(sj27)*(x710));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x711)*(x718)))+(((IkReal(-1.00000000000000))*(sj28)*(x712)*(x713)))+(((IkReal(-1.00000000000000))*(x713)*(x714)))+(((IkReal(-1.00000000000000))*(sj28)*(x711)*(x713)))+(((IkReal(-1.00000000000000))*(x712)*(x718)))+(((IkReal(0.0300000000000000))*(x718)))+(((x713)*(x716))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x714)*(x715)))+(((IkReal(-1.00000000000000))*(x711)*(x717)))+(((sj28)*(x712)*(x715)))+(((IkReal(-1.00000000000000))*(x712)*(x717)))+(((IkReal(0.0300000000000000))*(x717)))+(((sj28)*(x711)*(x715)))+(((IkReal(-1.00000000000000))*(x715)*(x716))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x711)*(x718)))+(((IkReal(-1.00000000000000))*(sj28)*(x712)*(x713)))+(((IkReal(-1.00000000000000))*(x713)*(x714)))+(((IkReal(-1.00000000000000))*(sj28)*(x711)*(x713)))+(((IkReal(-1.00000000000000))*(x712)*(x718)))+(((IkReal(0.0300000000000000))*(x718)))+(((x713)*(x716)))))), ((gconst1)*(((((x714)*(x715)))+(((IkReal(-1.00000000000000))*(x711)*(x717)))+(((sj28)*(x712)*(x715)))+(((IkReal(-1.00000000000000))*(x712)*(x717)))+(((IkReal(0.0300000000000000))*(x717)))+(((sj28)*(x711)*(x715)))+(((IkReal(-1.00000000000000))*(x715)*(x716)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[6];
IkReal x719=IKsin(j26);
IkReal x720=IKcos(j26);
IkReal x721=((IkReal(0.0600000000000000))*(px));
IkReal x722=((IkReal(0.313800000000000))*(cj29));
IkReal x723=((IkReal(0.0600000000000000))*(sj28));
IkReal x724=((cj27)*(pz));
IkReal x725=((IkReal(0.0300000000000000))*(cj29));
IkReal x726=((IkReal(1.00000000000000))*(sj27));
IkReal x727=((sj27)*(sj28));
IkReal x728=((IkReal(0.313800000000000))*(sj29));
IkReal x729=((IkReal(0.0300000000000000))*(sj29));
IkReal x730=((cj28)*(x720));
IkReal x731=((py)*(x720));
IkReal x732=((px)*(x720));
IkReal x733=((cj28)*(x719));
IkReal x734=((px)*(x719));
IkReal x735=((py)*(x719));
IkReal x736=((cj27)*(x734));
evalcond[0]=((((IkReal(-1.00000000000000))*(x735)))+(((IkReal(-1.00000000000000))*(x732)))+(((IkReal(-1.00000000000000))*(cj28)*(x725)))+(((IkReal(-1.00000000000000))*(cj28)*(x728)))+(((IkReal(0.0300000000000000))*(cj28))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj27)*(x731)))+(((IkReal(-1.00000000000000))*(x729)))+(x736)+(x722)+(((IkReal(-1.00000000000000))*(pz)*(x726))));
evalcond[2]=((((sj28)*(x735)))+(((sj28)*(x732)))+(((IkReal(-1.00000000000000))*(px)*(x726)*(x733)))+(((py)*(sj27)*(x730)))+(((IkReal(-1.00000000000000))*(cj28)*(x724))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x727)*(x731)))+(((IkReal(-1.00000000000000))*(sj28)*(x726)*(x734)))+(((IkReal(-1.00000000000000))*(sj28)*(x724)))+(((IkReal(-1.00000000000000))*(x728)))+(((IkReal(-1.00000000000000))*(x725)))+(((IkReal(-1.00000000000000))*(py)*(x733)))+(((IkReal(-1.00000000000000))*(px)*(x730))));
evalcond[4]=((((IkReal(-0.0300000000000000))*(x727)))+(((x727)*(x728)))+(((cj27)*(x722)))+(((IkReal(-1.00000000000000))*(x731)))+(((IkReal(-1.00000000000000))*(cj27)*(x729)))+(((x725)*(x727)))+(x734)+(((IkReal(0.300000000000000))*(cj27))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x721)*(x730)))+(((x723)*(x724)))+(((IkReal(-1.00000000000000))*(sj27)*(x723)*(x731)))+(((IkReal(0.600000000000000))*(pz)*(sj27)))+(((IkReal(-1.00000000000000))*(pp)))+(((x719)*(x721)*(x727)))+(((IkReal(-0.600000000000000))*(x736)))+(((IkReal(0.600000000000000))*(cj27)*(x731)))+(((IkReal(0.0600000000000000))*(py)*(x733))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j26array[1], cj26array[1], sj26array[1];
bool j26valid[1]={false};
_nj26 = 1;
IkReal x737=((px)*(sj29));
IkReal x738=((cj27)*(cj28));
IkReal x739=((cj29)*(px));
IkReal x740=((cj29)*(py));
IkReal x741=((IkReal(0.0300000000000000))*(py));
IkReal x742=((pz)*(sj27));
if( IKabs(((gconst0)*(((((x738)*(x741)))+(((IkReal(-0.300000000000000))*(px)))+(((px)*(x742)))+(((IkReal(-0.313800000000000))*(x739)))+(((IkReal(0.0300000000000000))*(x737)))+(((IkReal(-0.313800000000000))*(py)*(sj29)*(x738)))+(((IkReal(-0.0300000000000000))*(x738)*(x740))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-0.313800000000000))*(x737)*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x742)))+(((IkReal(0.313800000000000))*(x740)))+(((IkReal(-0.0300000000000000))*(x738)*(x739)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj29)*(x741)))+(((IkReal(0.0300000000000000))*(px)*(x738))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j26array[0]=IKatan2(((gconst0)*(((((x738)*(x741)))+(((IkReal(-0.300000000000000))*(px)))+(((px)*(x742)))+(((IkReal(-0.313800000000000))*(x739)))+(((IkReal(0.0300000000000000))*(x737)))+(((IkReal(-0.313800000000000))*(py)*(sj29)*(x738)))+(((IkReal(-0.0300000000000000))*(x738)*(x740)))))), ((gconst0)*(((((IkReal(-0.313800000000000))*(x737)*(x738)))+(((IkReal(-1.00000000000000))*(py)*(x742)))+(((IkReal(0.313800000000000))*(x740)))+(((IkReal(-0.0300000000000000))*(x738)*(x739)))+(((IkReal(0.300000000000000))*(py)))+(((IkReal(-1.00000000000000))*(sj29)*(x741)))+(((IkReal(0.0300000000000000))*(px)*(x738)))))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
for(int ij26 = 0; ij26 < 1; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 1; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[6];
IkReal x743=IKsin(j26);
IkReal x744=IKcos(j26);
IkReal x745=((IkReal(0.0600000000000000))*(px));
IkReal x746=((IkReal(0.313800000000000))*(cj29));
IkReal x747=((IkReal(0.0600000000000000))*(sj28));
IkReal x748=((cj27)*(pz));
IkReal x749=((IkReal(0.0300000000000000))*(cj29));
IkReal x750=((IkReal(1.00000000000000))*(sj27));
IkReal x751=((sj27)*(sj28));
IkReal x752=((IkReal(0.313800000000000))*(sj29));
IkReal x753=((IkReal(0.0300000000000000))*(sj29));
IkReal x754=((cj28)*(x744));
IkReal x755=((py)*(x744));
IkReal x756=((px)*(x744));
IkReal x757=((cj28)*(x743));
IkReal x758=((px)*(x743));
IkReal x759=((py)*(x743));
IkReal x760=((cj27)*(x758));
evalcond[0]=((((IkReal(-1.00000000000000))*(x759)))+(((IkReal(-1.00000000000000))*(x756)))+(((IkReal(-1.00000000000000))*(cj28)*(x752)))+(((IkReal(0.0300000000000000))*(cj28)))+(((IkReal(-1.00000000000000))*(cj28)*(x749))));
evalcond[1]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(cj27)*(x755)))+(x746)+(x760)+(((IkReal(-1.00000000000000))*(pz)*(x750)))+(((IkReal(-1.00000000000000))*(x753))));
evalcond[2]=((((sj28)*(x756)))+(((sj28)*(x759)))+(((IkReal(-1.00000000000000))*(cj28)*(x748)))+(((py)*(sj27)*(x754)))+(((IkReal(-1.00000000000000))*(px)*(x750)*(x757))));
evalcond[3]=((IkReal(0.0300000000000000))+(((x751)*(x755)))+(((IkReal(-1.00000000000000))*(sj28)*(x750)*(x758)))+(((IkReal(-1.00000000000000))*(sj28)*(x748)))+(((IkReal(-1.00000000000000))*(px)*(x754)))+(((IkReal(-1.00000000000000))*(x749)))+(((IkReal(-1.00000000000000))*(py)*(x757)))+(((IkReal(-1.00000000000000))*(x752))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj27)*(x753)))+(((x751)*(x752)))+(((IkReal(-1.00000000000000))*(x755)))+(((cj27)*(x746)))+(x758)+(((x749)*(x751)))+(((IkReal(-0.0300000000000000))*(x751)))+(((IkReal(0.300000000000000))*(cj27))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x745)*(x754)))+(((x743)*(x745)*(x751)))+(((IkReal(0.0600000000000000))*(py)*(x757)))+(((IkReal(0.600000000000000))*(cj27)*(x755)))+(((x747)*(x748)))+(((IkReal(-0.600000000000000))*(x760)))+(((IkReal(0.600000000000000))*(pz)*(sj27)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(sj27)*(x747)*(x755))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
_nj26 = 2;
IkReal x761=((IkReal(0.0300000000000000))*(cj28));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x762=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj28)*(sj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x761)))+(x761))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj28)*(sj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x761)))+(x761))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x763=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj28)*(sj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x761)))+(x761)))));
j26array[0]=((((IkReal(-1.00000000000000))*(x762)))+(((IkReal(-1.00000000000000))*(x763))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
j26array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x762)))+(x763));
sj26array[1]=IKsin(j26array[1]);
cj26array[1]=IKcos(j26array[1]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
if( j26array[1] > IKPI )
{
    j26array[1]-=IK2PI;
}
else if( j26array[1] < -IKPI )
{    j26array[1]+=IK2PI;
}
j26valid[1] = true;
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 2; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];
{
IkReal evalcond[2];
IkReal x764=(cj28)*(cj28);
IkReal x765=(px)*(px);
IkReal x766=(sj28)*(sj28);
IkReal x767=(py)*(py);
IkReal x768=IKsin(j26);
IkReal x769=IKcos(j26);
IkReal x770=((cj28)*(px));
IkReal x771=((IkReal(0.313800000000000))*(sj29));
IkReal x772=((cj28)*(py));
IkReal x773=((IkReal(0.0300000000000000))*(cj29));
IkReal x774=((IkReal(1.00000000000000))*(x765));
IkReal x775=((px)*(py)*(x766));
IkReal x776=((px)*(py)*(x764));
evalcond[0]=((((x769)*(((((IkReal(-1.00000000000000))*(x764)*(x774)))+(((IkReal(-1.00000000000000))*(x766)*(x774)))))))+(((x768)*(((((IkReal(-1.00000000000000))*(x776)))+(((IkReal(-1.00000000000000))*(x775)))))))+(((IkReal(-1.00000000000000))*(x770)*(x771)))+(((IkReal(-1.00000000000000))*(x770)*(x773)))+(((IkReal(0.0300000000000000))*(x770))));
evalcond[1]=((((x768)*(((((x766)*(x767)))+(((x764)*(x767)))))))+(((x771)*(x772)))+(((x772)*(x773)))+(((x769)*(((x776)+(x775)))))+(((IkReal(-0.0300000000000000))*(x772))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x777=((cj26)*(py));
IkReal x778=((IkReal(0.313800000000000))*(cj29));
IkReal x779=((pz)*(sj28));
IkReal x780=((px)*(sj26));
IkReal x781=((IkReal(0.0300000000000000))*(sj29));
gconst47=IKsign(((((x778)*(x780)))+(((IkReal(-0.300000000000000))*(x777)))+(((IkReal(-0.313800000000000))*(sj29)*(x779)))+(((IkReal(-0.0300000000000000))*(cj29)*(x779)))+(((IkReal(0.300000000000000))*(x780)))+(((IkReal(-1.00000000000000))*(x777)*(x778)))+(((x777)*(x781)))+(((IkReal(-1.00000000000000))*(x780)*(x781)))+(((IkReal(0.0300000000000000))*(x779)))));
IkReal x782=((px)*(sj26));
IkReal x783=((pz)*(sj28));
IkReal x784=((IkReal(10.4600000000000))*(cj29));
IkReal x785=((cj26)*(py));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj29)*(x783)))+(((x782)*(x784)))+(((IkReal(-10.0000000000000))*(x785)))+(((sj29)*(x785)))+(((IkReal(-1.00000000000000))*(x784)*(x785)))+(((IkReal(-1.00000000000000))*(sj29)*(x782)))+(((IkReal(-10.4600000000000))*(sj29)*(x783)))+(x783)+(((IkReal(10.0000000000000))*(x782))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj28)*((pz)*(pz))))+(((cj28)*((cj26)*(cj26))*((py)*(py))))+(((IkReal(-2.00000000000000))*(cj26)*(cj28)*(px)*(py)*(sj26)))+(((cj28)*((px)*(px))*((sj26)*(sj26))))));
dummyeval[0]=((((cj28)*((pz)*(pz))))+(((cj28)*((cj26)*(cj26))*((py)*(py))))+(((IkReal(-2.00000000000000))*(cj26)*(cj28)*(px)*(py)*(sj26)))+(((cj28)*((px)*(px))*((sj26)*(sj26)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x786=((cj26)*(px));
IkReal x787=((py)*(sj26));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x786)))+(((IkReal(-1.00000000000000))*(x787))));
evalcond[3]=((x786)+(x787));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x788=((cj26)*(py));
IkReal x789=((IkReal(0.313800000000000))*(cj29));
IkReal x790=((px)*(sj26));
IkReal x791=((IkReal(0.0300000000000000))*(pz));
IkReal x792=((IkReal(0.0300000000000000))*(sj29));
gconst49=IKsign(((((IkReal(-1.00000000000000))*(x788)*(x789)))+(((x788)*(x792)))+(((IkReal(-1.00000000000000))*(x790)*(x792)))+(((IkReal(0.300000000000000))*(x790)))+(((IkReal(-0.313800000000000))*(pz)*(sj29)))+(x791)+(((IkReal(-0.300000000000000))*(x788)))+(((IkReal(-1.00000000000000))*(cj29)*(x791)))+(((x789)*(x790)))));
IkReal x793=((px)*(sj26));
IkReal x794=((IkReal(10.4600000000000))*(cj29));
IkReal x795=((cj26)*(py));
dummyeval[0]=((((IkReal(10.0000000000000))*(x793)))+(((IkReal(-1.00000000000000))*(x794)*(x795)))+(((IkReal(-10.4600000000000))*(pz)*(sj29)))+(((x793)*(x794)))+(pz)+(((IkReal(-10.0000000000000))*(x795)))+(((IkReal(-1.00000000000000))*(sj29)*(x793)))+(((sj29)*(x795)))+(((IkReal(-1.00000000000000))*(cj29)*(pz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26)))));
dummyeval[0]=(((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x796=((IkReal(0.0300000000000000))*(pz));
IkReal x797=((px)*(sj26));
IkReal x798=((IkReal(0.313800000000000))*(cj29));
IkReal x799=((IkReal(0.313800000000000))*(sj29));
IkReal x800=((cj26)*(py));
IkReal x801=((cj29)*(x800));
IkReal x802=((IkReal(0.0300000000000000))*(x800));
if( IKabs(((gconst48)*(((((IkReal(0.0300000000000000))*(x797)))+(((IkReal(0.0300000000000000))*(x801)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj29)*(x796)))+(((IkReal(-0.0300000000000000))*(cj29)*(x797)))+(((IkReal(-1.00000000000000))*(x797)*(x799)))+(((pz)*(x798)))+(((x799)*(x800)))+(((IkReal(-1.00000000000000))*(x802))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(x797)*(x798)))+(((IkReal(0.0300000000000000))*(sj29)*(x797)))+(((x798)*(x800)))+(((IkReal(-1.00000000000000))*(sj29)*(x802)))+(((IkReal(-1.00000000000000))*(pz)*(x799)))+(x796)+(((IkReal(-0.300000000000000))*(x797)))+(((IkReal(-1.00000000000000))*(cj29)*(x796)))+(((IkReal(0.300000000000000))*(x800))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst48)*(((((IkReal(0.0300000000000000))*(x797)))+(((IkReal(0.0300000000000000))*(x801)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(sj29)*(x796)))+(((IkReal(-0.0300000000000000))*(cj29)*(x797)))+(((IkReal(-1.00000000000000))*(x797)*(x799)))+(((pz)*(x798)))+(((x799)*(x800)))+(((IkReal(-1.00000000000000))*(x802)))))), ((gconst48)*(((((IkReal(-1.00000000000000))*(x797)*(x798)))+(((IkReal(0.0300000000000000))*(sj29)*(x797)))+(((x798)*(x800)))+(((IkReal(-1.00000000000000))*(sj29)*(x802)))+(((IkReal(-1.00000000000000))*(pz)*(x799)))+(x796)+(((IkReal(-0.300000000000000))*(x797)))+(((IkReal(-1.00000000000000))*(cj29)*(x796)))+(((IkReal(0.300000000000000))*(x800)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x803=IKcos(j27);
IkReal x804=IKsin(j27);
IkReal x805=((IkReal(0.313800000000000))*(cj29));
IkReal x806=((IkReal(0.0300000000000000))*(cj29));
IkReal x807=((px)*(sj26));
IkReal x808=((cj26)*(py));
IkReal x809=((IkReal(1.00000000000000))*(pz));
IkReal x810=((IkReal(0.313800000000000))*(sj29));
IkReal x811=((IkReal(0.0300000000000000))*(x804));
IkReal x812=((IkReal(0.0600000000000000))*(x804));
IkReal x813=((IkReal(0.0300000000000000))*(x803));
IkReal x814=((IkReal(0.600000000000000))*(x803));
IkReal x815=((pz)*(x803));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x804)*(x809)))+(((IkReal(-1.00000000000000))*(x803)*(x808)))+(((x803)*(x807)))+(((IkReal(-0.0300000000000000))*(sj29)))+(x805));
evalcond[1]=((((IkReal(-1.00000000000000))*(x803)*(x810)))+(((x804)*(x805)))+(((IkReal(-1.00000000000000))*(sj29)*(x811)))+(((IkReal(-1.00000000000000))*(x803)*(x806)))+(x813)+(((IkReal(-1.00000000000000))*(x809)))+(((IkReal(0.300000000000000))*(x804))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x804)*(x808)))+(((IkReal(-1.00000000000000))*(x810)))+(((IkReal(-1.00000000000000))*(x804)*(x807)))+(((IkReal(-1.00000000000000))*(x803)*(x809)))+(((IkReal(-1.00000000000000))*(x806))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x808)))+(((x804)*(x806)))+(((IkReal(-1.00000000000000))*(x811)))+(((IkReal(-1.00000000000000))*(sj29)*(x813)))+(((x803)*(x805)))+(((x804)*(x810)))+(x807)+(((IkReal(0.300000000000000))*(x803))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x808)*(x812)))+(((IkReal(0.600000000000000))*(pz)*(x804)))+(((x808)*(x814)))+(((IkReal(-1.00000000000000))*(pp)))+(((x807)*(x812)))+(((IkReal(-1.00000000000000))*(x807)*(x814)))+(((IkReal(0.0600000000000000))*(x815))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x816=(cj29)*(cj29);
IkReal x817=(sj29)*(sj29);
IkReal x818=((cj29)*(sj29));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(-0.0975704400000000))*(x818)))+(((IkReal(0.00941400000000000))*(x817)))+(((IkReal(-0.00941400000000000))*(x816)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+(((IkReal(-0.0984704400000000))*(x816)))+(((IkReal(0.0188280000000000))*(x818)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x817))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(-0.0975704400000000))*(x818)))+(((IkReal(0.00941400000000000))*(x817)))+(((IkReal(-0.00941400000000000))*(x816)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+(((IkReal(-0.0984704400000000))*(x816)))+(((IkReal(0.0188280000000000))*(x818)))+((pz)*(pz))+(((IkReal(-0.000900000000000000))*(x817)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x819=IKcos(j27);
IkReal x820=IKsin(j27);
IkReal x821=((IkReal(0.313800000000000))*(cj29));
IkReal x822=((IkReal(0.0300000000000000))*(cj29));
IkReal x823=((px)*(sj26));
IkReal x824=((cj26)*(py));
IkReal x825=((IkReal(1.00000000000000))*(pz));
IkReal x826=((IkReal(0.313800000000000))*(sj29));
IkReal x827=((IkReal(0.0300000000000000))*(x820));
IkReal x828=((IkReal(0.0600000000000000))*(x820));
IkReal x829=((IkReal(0.0300000000000000))*(x819));
IkReal x830=((IkReal(0.600000000000000))*(x819));
IkReal x831=((pz)*(x819));
evalcond[0]=((IkReal(0.300000000000000))+(((x819)*(x823)))+(((IkReal(-1.00000000000000))*(x819)*(x824)))+(((IkReal(-1.00000000000000))*(x820)*(x825)))+(((IkReal(-0.0300000000000000))*(sj29)))+(x821));
evalcond[1]=((((x820)*(x821)))+(((IkReal(-1.00000000000000))*(x819)*(x822)))+(((IkReal(-1.00000000000000))*(x819)*(x826)))+(((IkReal(-1.00000000000000))*(x825)))+(((IkReal(0.300000000000000))*(x820)))+(((IkReal(-1.00000000000000))*(sj29)*(x827)))+(x829));
evalcond[2]=((IkReal(0.0300000000000000))+(((x820)*(x824)))+(((IkReal(-1.00000000000000))*(x819)*(x825)))+(((IkReal(-1.00000000000000))*(x826)))+(((IkReal(-1.00000000000000))*(x822)))+(((IkReal(-1.00000000000000))*(x820)*(x823))));
evalcond[3]=((((x820)*(x826)))+(((x820)*(x822)))+(((IkReal(-1.00000000000000))*(x827)))+(((x819)*(x821)))+(((IkReal(0.300000000000000))*(x819)))+(((IkReal(-1.00000000000000))*(sj29)*(x829)))+(((IkReal(-1.00000000000000))*(x824)))+(x823));
evalcond[4]=((IkReal(0.00847044000000000))+(((x824)*(x830)))+(((IkReal(0.0600000000000000))*(x831)))+(((IkReal(-1.00000000000000))*(x823)*(x830)))+(((IkReal(-1.00000000000000))*(x824)*(x828)))+(((IkReal(-1.00000000000000))*(pp)))+(((x823)*(x828)))+(((IkReal(0.600000000000000))*(pz)*(x820))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x832=((((IkReal(-1.00000000000000))*(py)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x832;
evalcond[3]=x832;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x833=((IkReal(0.0300000000000000))*(cj29));
IkReal x834=((cj26)*(py));
IkReal x835=((px)*(sj26));
IkReal x836=((IkReal(0.313800000000000))*(sj29));
gconst51=IKsign(((((IkReal(-0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x833)*(x834)))+(((x833)*(x835)))+(((x835)*(x836)))+(((IkReal(-1.00000000000000))*(x834)*(x836)))+(((IkReal(-0.0300000000000000))*(x835)))+(((IkReal(0.0300000000000000))*(pz)*(sj29)))+(((IkReal(-0.313800000000000))*(cj29)*(pz)))+(((IkReal(0.0300000000000000))*(x834)))));
IkReal x837=((cj26)*(py));
IkReal x838=((px)*(sj26));
IkReal x839=((IkReal(10.4600000000000))*(sj29));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj29)*(x837)))+(((x838)*(x839)))+(((IkReal(-1.00000000000000))*(x837)*(x839)))+(((IkReal(-10.0000000000000))*(pz)))+(((cj29)*(x838)))+(((IkReal(-1.00000000000000))*(x838)))+(((IkReal(-10.4600000000000))*(cj29)*(pz)))+(x837)+(((pz)*(sj29))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26)))));
dummyeval[0]=(((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x840=x832;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x840;
evalcond[3]=x840;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj26)))+(((cj26)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x841=((cj26)*(py));
IkReal x842=((px)*(sj26));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x841)*(x841))))+(((IkReal(2.00000000000000))*(x841)*(x842)))+(((IkReal(-1.00000000000000))*((x842)*(x842)))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x841)))+(x842));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x843=((IkReal(1.00000000000000))*(pp));
IkReal x844=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j26)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x843))));
evalcond[2]=x844;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x844;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x843))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x845=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j26)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x845))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x845))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x846=((IkReal(1.00000000000000))*(pp));
IkReal x847=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j26)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x846))));
evalcond[2]=x847;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x847;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x846))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x848=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j26, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x848))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x848))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x849=((cj26)*(py));
IkReal x850=((px)*(sj26));
IkReal x851=((IkReal(5000.00000000000))*(pp));
if( IKabs(((((IKabs(((((IkReal(600.000000000000))*(x849)*(x850)))+(((IkReal(-300.000000000000))*((x849)*(x849))))+(((IkReal(-300.000000000000))*((x850)*(x850)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x849)*(x850)))+(((IkReal(-300.000000000000))*((x849)*(x849))))+(((IkReal(-300.000000000000))*((x850)*(x850))))))):(IkReal)1.0e30))*(((((x850)*(x851)))+(((IkReal(-1883.75220000000))*(x850)))+(((IkReal(-1.00000000000000))*(x849)*(x851)))+(((IkReal(1883.75220000000))*(x849))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(5000.00000000000))*(x850)))+(((IkReal(-5000.00000000000))*(x849))))) != 0)?((IkReal)1/(((((IkReal(5000.00000000000))*(x850)))+(((IkReal(-5000.00000000000))*(x849)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(600.000000000000))*(x849)*(x850)))+(((IkReal(-300.000000000000))*((x849)*(x849))))+(((IkReal(-300.000000000000))*((x850)*(x850)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x849)*(x850)))+(((IkReal(-300.000000000000))*((x849)*(x849))))+(((IkReal(-300.000000000000))*((x850)*(x850))))))):(IkReal)1.0e30))*(((((x850)*(x851)))+(((IkReal(-1883.75220000000))*(x850)))+(((IkReal(-1.00000000000000))*(x849)*(x851)))+(((IkReal(1883.75220000000))*(x849)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(5000.00000000000))*(x850)))+(((IkReal(-5000.00000000000))*(x849))))) != 0)?((IkReal)1/(((((IkReal(5000.00000000000))*(x850)))+(((IkReal(-5000.00000000000))*(x849)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IKabs(((((IkReal(600.000000000000))*(x849)*(x850)))+(((IkReal(-300.000000000000))*((x849)*(x849))))+(((IkReal(-300.000000000000))*((x850)*(x850)))))) != 0)?((IkReal)1/(((((IkReal(600.000000000000))*(x849)*(x850)))+(((IkReal(-300.000000000000))*((x849)*(x849))))+(((IkReal(-300.000000000000))*((x850)*(x850))))))):(IkReal)1.0e30))*(((((x850)*(x851)))+(((IkReal(-1883.75220000000))*(x850)))+(((IkReal(-1.00000000000000))*(x849)*(x851)))+(((IkReal(1883.75220000000))*(x849)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(5000.00000000000))*(x850)))+(((IkReal(-5000.00000000000))*(x849))))) != 0)?((IkReal)1/(((((IkReal(5000.00000000000))*(x850)))+(((IkReal(-5000.00000000000))*(x849)))))):(IkReal)1.0e30))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x852=IKcos(j27);
IkReal x853=IKsin(j27);
IkReal x854=((cj26)*(py));
IkReal x855=((px)*(sj26));
IkReal x856=((IkReal(0.0600000000000000))*(x853));
IkReal x857=((IkReal(0.600000000000000))*(x852));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x852)*(x854)))+(((x852)*(x855))));
evalcond[1]=((IkReal(0.613800000000000))*(x853));
evalcond[2]=((((x853)*(x855)))+(((IkReal(-1.00000000000000))*(x853)*(x854))));
evalcond[3]=((((IkReal(0.613800000000000))*(x852)))+(((IkReal(-1.00000000000000))*(x854)))+(x855));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x854)*(x856)))+(((x854)*(x857)))+(((IkReal(-1.00000000000000))*(x855)*(x856)))+(((IkReal(-1.00000000000000))*(x855)*(x857))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x858=((cj26)*(py));
IkReal x859=((px)*(sj26));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x859)))+(((IkReal(184.140000000000))*(x858))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x859)))+(((IkReal(184.140000000000))*(x858)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x859)*(x859))))+(((IkReal(6000.00000000000))*(x858)*(x859)))+(((IkReal(-3000.00000000000))*((x858)*(x858))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x858)))+(((IkReal(-1.62919517758227))*(x859))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x859)))+(((IkReal(184.140000000000))*(x858))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x859)))+(((IkReal(184.140000000000))*(x858)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x859)*(x859))))+(((IkReal(6000.00000000000))*(x858)*(x859)))+(((IkReal(-3000.00000000000))*((x858)*(x858))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x858)))+(((IkReal(-1.62919517758227))*(x859)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x859)))+(((IkReal(184.140000000000))*(x858))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x859)))+(((IkReal(184.140000000000))*(x858)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x859)*(x859))))+(((IkReal(6000.00000000000))*(x858)*(x859)))+(((IkReal(-3000.00000000000))*((x858)*(x858))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x858)))+(((IkReal(-1.62919517758227))*(x859)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x860=IKcos(j27);
IkReal x861=IKsin(j27);
IkReal x862=((cj26)*(py));
IkReal x863=((px)*(sj26));
IkReal x864=((IkReal(0.0600000000000000))*(x861));
IkReal x865=((IkReal(0.600000000000000))*(x860));
evalcond[0]=((IkReal(0.613800000000000))+(((x860)*(x863)))+(((IkReal(-1.00000000000000))*(x860)*(x862))));
evalcond[1]=((IkReal(0.613800000000000))*(x861));
evalcond[2]=((((IkReal(-1.00000000000000))*(x861)*(x862)))+(((x861)*(x863))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x862)))+(((IkReal(0.613800000000000))*(x860)))+(x863));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((x862)*(x865)))+(((x862)*(x864)))+(((IkReal(-1.00000000000000))*(x863)*(x864)))+(((IkReal(-1.00000000000000))*(x863)*(x865))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x866=((pz)*(sj29));
IkReal x867=((cj26)*(py));
IkReal x868=((IkReal(0.313800000000000))*(cj29));
IkReal x869=((px)*(sj26));
IkReal x870=((IkReal(0.0300000000000000))*(cj29));
IkReal x871=((IkReal(0.0300000000000000))*(sj29));
IkReal x872=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst50)*(((((IkReal(-0.0300000000000000))*(x866)))+(((IkReal(-0.0300000000000000))*(x869)))+(((IkReal(0.0300000000000000))*(x867)))+(((IkReal(0.300000000000000))*(pz)))+(((x869)*(x872)))+(((x869)*(x870)))+(((IkReal(-1.00000000000000))*(x867)*(x870)))+(((IkReal(-1.00000000000000))*(x867)*(x872)))+(((pz)*(x868))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-0.300000000000000))*(x869)))+(((IkReal(0.300000000000000))*(x867)))+(((IkReal(0.313800000000000))*(x866)))+(((x867)*(x868)))+(((IkReal(-1.00000000000000))*(x868)*(x869)))+(((x869)*(x871)))+(((IkReal(-1.00000000000000))*(x867)*(x871)))+(((pz)*(x870)))+(((IkReal(-0.0300000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst50)*(((((IkReal(-0.0300000000000000))*(x866)))+(((IkReal(-0.0300000000000000))*(x869)))+(((IkReal(0.0300000000000000))*(x867)))+(((IkReal(0.300000000000000))*(pz)))+(((x869)*(x872)))+(((x869)*(x870)))+(((IkReal(-1.00000000000000))*(x867)*(x870)))+(((IkReal(-1.00000000000000))*(x867)*(x872)))+(((pz)*(x868)))))), ((gconst50)*(((((IkReal(-0.300000000000000))*(x869)))+(((IkReal(0.300000000000000))*(x867)))+(((IkReal(0.313800000000000))*(x866)))+(((x867)*(x868)))+(((IkReal(-1.00000000000000))*(x868)*(x869)))+(((x869)*(x871)))+(((IkReal(-1.00000000000000))*(x867)*(x871)))+(((pz)*(x870)))+(((IkReal(-0.0300000000000000))*(pz)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x873=IKcos(j27);
IkReal x874=IKsin(j27);
IkReal x875=((IkReal(0.313800000000000))*(cj29));
IkReal x876=((IkReal(0.0300000000000000))*(cj29));
IkReal x877=((px)*(sj26));
IkReal x878=((cj26)*(py));
IkReal x879=((IkReal(1.00000000000000))*(pz));
IkReal x880=((IkReal(0.313800000000000))*(sj29));
IkReal x881=((IkReal(0.0300000000000000))*(x874));
IkReal x882=((IkReal(0.0600000000000000))*(x874));
IkReal x883=((IkReal(0.0300000000000000))*(x873));
IkReal x884=((pz)*(x873));
IkReal x885=((IkReal(0.600000000000000))*(x873));
evalcond[0]=((IkReal(0.300000000000000))+(((x873)*(x877)))+(((IkReal(-1.00000000000000))*(x873)*(x878)))+(((IkReal(-0.0300000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x874)*(x879)))+(x875));
evalcond[1]=((((IkReal(0.300000000000000))*(x874)))+(((x874)*(x875)))+(((IkReal(-1.00000000000000))*(sj29)*(x881)))+(((x873)*(x876)))+(((IkReal(-1.00000000000000))*(x883)))+(((x873)*(x880)))+(((IkReal(-1.00000000000000))*(x879))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x874)*(x877)))+(((IkReal(-1.00000000000000))*(x880)))+(((IkReal(-1.00000000000000))*(x874)*(x878)))+(x884)+(((IkReal(-1.00000000000000))*(x876))));
evalcond[3]=((((IkReal(0.300000000000000))*(x873)))+(((IkReal(-1.00000000000000))*(sj29)*(x883)))+(((IkReal(-1.00000000000000))*(x878)))+(((x873)*(x875)))+(((IkReal(-1.00000000000000))*(x874)*(x876)))+(x877)+(x881)+(((IkReal(-1.00000000000000))*(x874)*(x880))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(x877)*(x882)))+(((IkReal(-1.00000000000000))*(x877)*(x885)))+(((IkReal(-1.00000000000000))*(pp)))+(((x878)*(x885)))+(((x878)*(x882)))+(((IkReal(0.600000000000000))*(pz)*(x874))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x886=(sj29)*(sj29);
IkReal x887=(cj29)*(cj29);
IkReal x888=((IkReal(0.0188280000000000))*(sj29));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x886)))+(((IkReal(0.000900000000000000))*(x887)))+(((cj29)*(x888)))+(((IkReal(-1.00000000000000))*(x888)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.00180000000000000))*(cj29))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(0.00941400000000000))*(x886)))+(((IkReal(-0.0975704400000000))*(cj29)*(sj29)))+(((IkReal(-0.00941400000000000))*(x887)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x886)))+(((IkReal(0.000900000000000000))*(x887)))+(((cj29)*(x888)))+(((IkReal(-1.00000000000000))*(x888)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((IkReal(-0.00180000000000000))*(cj29)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(0.00941400000000000))*(x886)))+(((IkReal(-0.0975704400000000))*(cj29)*(sj29)))+(((IkReal(-0.00941400000000000))*(x887)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x889=IKcos(j27);
IkReal x890=IKsin(j27);
IkReal x891=((IkReal(0.313800000000000))*(cj29));
IkReal x892=((IkReal(0.0300000000000000))*(cj29));
IkReal x893=((px)*(sj26));
IkReal x894=((cj26)*(py));
IkReal x895=((IkReal(1.00000000000000))*(pz));
IkReal x896=((IkReal(0.313800000000000))*(sj29));
IkReal x897=((IkReal(0.0300000000000000))*(x890));
IkReal x898=((IkReal(0.0600000000000000))*(x890));
IkReal x899=((IkReal(0.0300000000000000))*(x889));
IkReal x900=((pz)*(x889));
IkReal x901=((IkReal(0.600000000000000))*(x889));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x889)*(x894)))+(((x889)*(x893)))+(((IkReal(-0.0300000000000000))*(sj29)))+(x891)+(((IkReal(-1.00000000000000))*(x890)*(x895))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x895)))+(((IkReal(-1.00000000000000))*(x899)))+(((IkReal(-1.00000000000000))*(sj29)*(x897)))+(((IkReal(0.300000000000000))*(x890)))+(((x889)*(x892)))+(((x889)*(x896)))+(((x890)*(x891))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x896)))+(((IkReal(-1.00000000000000))*(x892)))+(((x890)*(x893)))+(((IkReal(-1.00000000000000))*(x890)*(x894)))+(x900));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj29)*(x899)))+(((IkReal(-1.00000000000000))*(x894)))+(((IkReal(0.300000000000000))*(x889)))+(((x889)*(x891)))+(x897)+(x893)+(((IkReal(-1.00000000000000))*(x890)*(x892)))+(((IkReal(-1.00000000000000))*(x890)*(x896))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x894)*(x898)))+(((x894)*(x901)))+(((IkReal(-1.00000000000000))*(x893)*(x901)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0600000000000000))*(x900)))+(((IkReal(-1.00000000000000))*(x893)*(x898)))+(((IkReal(0.600000000000000))*(pz)*(x890))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x902=((IkReal(0.0300000000000000))*(sj29));
IkReal x903=((py)*(sj28));
IkReal x904=((IkReal(0.313800000000000))*(cj29));
IkReal x905=((IkReal(0.300000000000000))*(cj28));
IkReal x906=((cj26)*(py));
IkReal x907=((cj28)*(pz));
IkReal x908=((cj28)*(px)*(sj26));
IkReal x909=((cj26)*(sj26)*(sj28));
if( IKabs(((gconst46)*(((((IkReal(-1.00000000000000))*(px)*(x903)*((cj26)*(cj26))))+(((IkReal(-1.00000000000000))*(x902)*(x907)))+(((IkReal(-1.00000000000000))*(sj26)*(x903)*(x906)))+(((px)*(x903)*((sj26)*(sj26))))+(((x909)*((px)*(px))))+(((pz)*(x905)))+(((x904)*(x907))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((cj28)*(x904)*(x906)))+(((x905)*(x906)))+(((cj26)*(px)*(pz)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(x902)*(x906)))+(((x902)*(x908)))+(((IkReal(-1.00000000000000))*(x904)*(x908)))+(((IkReal(-1.00000000000000))*(px)*(sj26)*(x905)))+(((pz)*(sj26)*(x903))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst46)*(((((IkReal(-1.00000000000000))*(px)*(x903)*((cj26)*(cj26))))+(((IkReal(-1.00000000000000))*(x902)*(x907)))+(((IkReal(-1.00000000000000))*(sj26)*(x903)*(x906)))+(((px)*(x903)*((sj26)*(sj26))))+(((x909)*((px)*(px))))+(((pz)*(x905)))+(((x904)*(x907)))))), ((gconst46)*(((((cj28)*(x904)*(x906)))+(((x905)*(x906)))+(((cj26)*(px)*(pz)*(sj28)))+(((IkReal(-1.00000000000000))*(cj28)*(x902)*(x906)))+(((x902)*(x908)))+(((IkReal(-1.00000000000000))*(x904)*(x908)))+(((IkReal(-1.00000000000000))*(px)*(sj26)*(x905)))+(((pz)*(sj26)*(x903)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x910=IKcos(j27);
IkReal x911=IKsin(j27);
IkReal x912=((IkReal(0.313800000000000))*(cj29));
IkReal x913=((IkReal(0.0300000000000000))*(cj29));
IkReal x914=((py)*(sj26));
IkReal x915=((cj26)*(py));
IkReal x916=((px)*(sj26));
IkReal x917=((IkReal(0.0600000000000000))*(cj28));
IkReal x918=((cj26)*(px));
IkReal x919=((IkReal(1.00000000000000))*(pz));
IkReal x920=((IkReal(0.313800000000000))*(sj29));
IkReal x921=((IkReal(0.0300000000000000))*(sj29));
IkReal x922=((IkReal(1.00000000000000))*(cj28));
IkReal x923=((IkReal(0.600000000000000))*(x910));
IkReal x924=((sj28)*(x910));
IkReal x925=((sj28)*(x911));
IkReal x926=((cj28)*(x911));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x921)))+(((x910)*(x916)))+(((IkReal(-1.00000000000000))*(x910)*(x915)))+(x912)+(((IkReal(-1.00000000000000))*(x911)*(x919))));
evalcond[1]=((((x915)*(x926)))+(((IkReal(-1.00000000000000))*(x911)*(x916)*(x922)))+(((IkReal(-1.00000000000000))*(cj28)*(x910)*(x919)))+(((sj28)*(x918)))+(((sj28)*(x914))));
evalcond[2]=((((IkReal(0.0300000000000000))*(x924)))+(((IkReal(-1.00000000000000))*(x919)))+(((IkReal(-1.00000000000000))*(x920)*(x924)))+(((x911)*(x912)))+(((IkReal(-1.00000000000000))*(x913)*(x924)))+(((IkReal(0.300000000000000))*(x911)))+(((IkReal(-1.00000000000000))*(x911)*(x921))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x920)))+(((x915)*(x925)))+(((IkReal(-1.00000000000000))*(x914)*(x922)))+(((IkReal(-1.00000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(x918)*(x922)))+(((IkReal(-1.00000000000000))*(x916)*(x925)))+(((IkReal(-1.00000000000000))*(x919)*(x924))));
evalcond[4]=((((x910)*(x912)))+(((x920)*(x925)))+(((IkReal(-0.0300000000000000))*(x925)))+(((IkReal(-1.00000000000000))*(x915)))+(((IkReal(-1.00000000000000))*(x910)*(x921)))+(((IkReal(0.300000000000000))*(x910)))+(x916)+(((x913)*(x925))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x917)*(x918)))+(((x915)*(x923)))+(((IkReal(0.600000000000000))*(pz)*(x911)))+(((x914)*(x917)))+(((IkReal(0.0600000000000000))*(pz)*(x924)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(x916)*(x925)))+(((IkReal(-0.0600000000000000))*(x915)*(x925)))+(((IkReal(-1.00000000000000))*(x916)*(x923))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x927=(cj29)*(cj29);
IkReal x928=(sj29)*(sj29);
IkReal x929=((IkReal(0.00941400000000000))*(sj28));
IkReal x930=((sj28)*(sj29));
if( IKabs(((gconst47)*(((((IkReal(-0.0950400000000000))*(x930)))+(((IkReal(-0.0975704400000000))*(cj29)*(x930)))+(((x928)*(x929)))+(((IkReal(0.00900000000000000))*(sj28)))+(((IkReal(0.000414000000000000))*(cj29)*(sj28)))+(((IkReal(-1.00000000000000))*(x927)*(x929)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+(((IkReal(-0.000900000000000000))*(x928)))+((pz)*(pz))+(((IkReal(0.0188280000000000))*(cj29)*(sj29)))+(((IkReal(-0.0984704400000000))*(x927))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst47)*(((((IkReal(-0.0950400000000000))*(x930)))+(((IkReal(-0.0975704400000000))*(cj29)*(x930)))+(((x928)*(x929)))+(((IkReal(0.00900000000000000))*(sj28)))+(((IkReal(0.000414000000000000))*(cj29)*(sj28)))+(((IkReal(-1.00000000000000))*(x927)*(x929)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+(((IkReal(-0.000900000000000000))*(x928)))+((pz)*(pz))+(((IkReal(0.0188280000000000))*(cj29)*(sj29)))+(((IkReal(-0.0984704400000000))*(x927)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x931=IKcos(j27);
IkReal x932=IKsin(j27);
IkReal x933=((IkReal(0.313800000000000))*(cj29));
IkReal x934=((IkReal(0.0300000000000000))*(cj29));
IkReal x935=((py)*(sj26));
IkReal x936=((cj26)*(py));
IkReal x937=((px)*(sj26));
IkReal x938=((IkReal(0.0600000000000000))*(cj28));
IkReal x939=((cj26)*(px));
IkReal x940=((IkReal(1.00000000000000))*(pz));
IkReal x941=((IkReal(0.313800000000000))*(sj29));
IkReal x942=((IkReal(0.0300000000000000))*(sj29));
IkReal x943=((IkReal(1.00000000000000))*(cj28));
IkReal x944=((IkReal(0.600000000000000))*(x931));
IkReal x945=((sj28)*(x931));
IkReal x946=((sj28)*(x932));
IkReal x947=((cj28)*(x932));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x942)))+(((IkReal(-1.00000000000000))*(x931)*(x936)))+(((IkReal(-1.00000000000000))*(x932)*(x940)))+(((x931)*(x937)))+(x933));
evalcond[1]=((((IkReal(-1.00000000000000))*(x932)*(x937)*(x943)))+(((x936)*(x947)))+(((sj28)*(x939)))+(((sj28)*(x935)))+(((IkReal(-1.00000000000000))*(cj28)*(x931)*(x940))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x940)))+(((IkReal(0.0300000000000000))*(x945)))+(((IkReal(0.300000000000000))*(x932)))+(((IkReal(-1.00000000000000))*(x941)*(x945)))+(((IkReal(-1.00000000000000))*(x932)*(x942)))+(((x932)*(x933)))+(((IkReal(-1.00000000000000))*(x934)*(x945))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x941)))+(((x936)*(x946)))+(((IkReal(-1.00000000000000))*(x939)*(x943)))+(((IkReal(-1.00000000000000))*(x937)*(x946)))+(((IkReal(-1.00000000000000))*(x935)*(x943)))+(((IkReal(-1.00000000000000))*(x940)*(x945)))+(((IkReal(-1.00000000000000))*(x934))));
evalcond[4]=((((x941)*(x946)))+(((IkReal(0.300000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(x936)))+(((x931)*(x933)))+(((x934)*(x946)))+(((IkReal(-0.0300000000000000))*(x946)))+(((IkReal(-1.00000000000000))*(x931)*(x942)))+(x937));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x936)*(x946)))+(((x936)*(x944)))+(((x935)*(x938)))+(((IkReal(0.600000000000000))*(pz)*(x932)))+(((IkReal(-1.00000000000000))*(pp)))+(((x938)*(x939)))+(((IkReal(0.0600000000000000))*(pz)*(x945)))+(((IkReal(-1.00000000000000))*(x937)*(x944)))+(((IkReal(0.0600000000000000))*(x937)*(x946))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j26array[2], cj26array[2], sj26array[2];
bool j26valid[2]={false};
_nj26 = 2;
IkReal x948=((IkReal(0.0300000000000000))*(cj28));
if( IKabs(((IkReal(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x949=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(px)), ((IkReal(-1.00000000000000))*(py)))));
if( ((((px)*(px))+((py)*(py)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj28)*(sj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x948)))+(x948))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj28)*(sj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x948)))+(x948))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x950=IKasin(((((IKabs(IKabs(IKsqrt((((px)*(px))+((py)*(py)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((px)*(px))+((py)*(py))))))):(IkReal)1.0e30))*(((((IkReal(-0.313800000000000))*(cj28)*(sj29)))+(((IkReal(-1.00000000000000))*(cj29)*(x948)))+(x948)))));
j26array[0]=((((IkReal(-1.00000000000000))*(x949)))+(((IkReal(-1.00000000000000))*(x950))));
sj26array[0]=IKsin(j26array[0]);
cj26array[0]=IKcos(j26array[0]);
j26array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x949)))+(x950));
sj26array[1]=IKsin(j26array[1]);
cj26array[1]=IKcos(j26array[1]);
if( j26array[0] > IKPI )
{
    j26array[0]-=IK2PI;
}
else if( j26array[0] < -IKPI )
{    j26array[0]+=IK2PI;
}
j26valid[0] = true;
if( j26array[1] > IKPI )
{
    j26array[1]-=IK2PI;
}
else if( j26array[1] < -IKPI )
{    j26array[1]+=IK2PI;
}
j26valid[1] = true;
for(int ij26 = 0; ij26 < 2; ++ij26)
{
if( !j26valid[ij26] )
{
    continue;
}
_ij26[0] = ij26; _ij26[1] = -1;
for(int iij26 = ij26+1; iij26 < 2; ++iij26)
{
if( j26valid[iij26] && IKabs(cj26array[ij26]-cj26array[iij26]) < IKFAST_SOLUTION_THRESH && IKabs(sj26array[ij26]-sj26array[iij26]) < IKFAST_SOLUTION_THRESH )
{
    j26valid[iij26]=false; _ij26[1] = iij26; break; 
}
}
j26 = j26array[ij26]; cj26 = cj26array[ij26]; sj26 = sj26array[ij26];

{
IkReal dummyeval[1];
IkReal gconst47;
IkReal x951=((cj26)*(py));
IkReal x952=((IkReal(0.313800000000000))*(cj29));
IkReal x953=((pz)*(sj28));
IkReal x954=((px)*(sj26));
IkReal x955=((IkReal(0.0300000000000000))*(sj29));
gconst47=IKsign(((((x951)*(x955)))+(((x952)*(x954)))+(((IkReal(0.300000000000000))*(x954)))+(((IkReal(-0.0300000000000000))*(cj29)*(x953)))+(((IkReal(0.0300000000000000))*(x953)))+(((IkReal(-1.00000000000000))*(x951)*(x952)))+(((IkReal(-1.00000000000000))*(x954)*(x955)))+(((IkReal(-0.300000000000000))*(x951)))+(((IkReal(-0.313800000000000))*(sj29)*(x953)))));
IkReal x956=((px)*(sj26));
IkReal x957=((pz)*(sj28));
IkReal x958=((IkReal(10.4600000000000))*(cj29));
IkReal x959=((cj26)*(py));
dummyeval[0]=((((sj29)*(x959)))+(((IkReal(-1.00000000000000))*(cj29)*(x957)))+(((IkReal(-1.00000000000000))*(sj29)*(x956)))+(((IkReal(10.0000000000000))*(x956)))+(((x956)*(x958)))+(((IkReal(-1.00000000000000))*(x958)*(x959)))+(((IkReal(-10.4600000000000))*(sj29)*(x957)))+(((IkReal(-10.0000000000000))*(x959)))+(x957));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=IKsign(((((cj28)*((pz)*(pz))))+(((cj28)*((cj26)*(cj26))*((py)*(py))))+(((IkReal(-2.00000000000000))*(cj26)*(cj28)*(px)*(py)*(sj26)))+(((cj28)*((px)*(px))*((sj26)*(sj26))))));
dummyeval[0]=((((cj28)*((pz)*(pz))))+(((cj28)*((cj26)*(cj26))*((py)*(py))))+(((IkReal(-2.00000000000000))*(cj26)*(cj28)*(px)*(py)*(sj26)))+(((cj28)*((px)*(px))*((sj26)*(sj26)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x960=((cj26)*(px));
IkReal x961=((py)*(sj26));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x960)))+(((IkReal(-1.00000000000000))*(x961))));
evalcond[3]=((x960)+(x961));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x962=((cj26)*(py));
IkReal x963=((IkReal(0.313800000000000))*(cj29));
IkReal x964=((px)*(sj26));
IkReal x965=((IkReal(0.0300000000000000))*(pz));
IkReal x966=((IkReal(0.0300000000000000))*(sj29));
gconst49=IKsign(((((IkReal(-1.00000000000000))*(x962)*(x963)))+(((IkReal(0.300000000000000))*(x964)))+(((x962)*(x966)))+(((IkReal(-1.00000000000000))*(x964)*(x966)))+(((x963)*(x964)))+(((IkReal(-1.00000000000000))*(cj29)*(x965)))+(((IkReal(-0.313800000000000))*(pz)*(sj29)))+(x965)+(((IkReal(-0.300000000000000))*(x962)))));
IkReal x967=((px)*(sj26));
IkReal x968=((IkReal(10.4600000000000))*(cj29));
IkReal x969=((cj26)*(py));
dummyeval[0]=((((sj29)*(x969)))+(((IkReal(-10.4600000000000))*(pz)*(sj29)))+(((IkReal(-1.00000000000000))*(sj29)*(x967)))+(((x967)*(x968)))+(((IkReal(10.0000000000000))*(x967)))+(pz)+(((IkReal(-1.00000000000000))*(x968)*(x969)))+(((IkReal(-1.00000000000000))*(cj29)*(pz)))+(((IkReal(-10.0000000000000))*(x969))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst48;
gconst48=IKsign((((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26)))));
dummyeval[0]=(((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x970=((IkReal(0.0300000000000000))*(pz));
IkReal x971=((px)*(sj26));
IkReal x972=((IkReal(0.313800000000000))*(cj29));
IkReal x973=((IkReal(0.313800000000000))*(sj29));
IkReal x974=((cj26)*(py));
IkReal x975=((cj29)*(x974));
IkReal x976=((IkReal(0.0300000000000000))*(x974));
if( IKabs(((gconst48)*(((((IkReal(-0.0300000000000000))*(cj29)*(x971)))+(((IkReal(-1.00000000000000))*(sj29)*(x970)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x971)*(x973)))+(((x973)*(x974)))+(((pz)*(x972)))+(((IkReal(0.0300000000000000))*(x975)))+(((IkReal(0.0300000000000000))*(x971)))+(((IkReal(-1.00000000000000))*(x976))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-1.00000000000000))*(sj29)*(x976)))+(((IkReal(0.300000000000000))*(x974)))+(((IkReal(-1.00000000000000))*(pz)*(x973)))+(((IkReal(-1.00000000000000))*(x971)*(x972)))+(((IkReal(-1.00000000000000))*(cj29)*(x970)))+(((IkReal(0.0300000000000000))*(sj29)*(x971)))+(((IkReal(-0.300000000000000))*(x971)))+(x970)+(((x972)*(x974))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst48)*(((((IkReal(-0.0300000000000000))*(cj29)*(x971)))+(((IkReal(-1.00000000000000))*(sj29)*(x970)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x971)*(x973)))+(((x973)*(x974)))+(((pz)*(x972)))+(((IkReal(0.0300000000000000))*(x975)))+(((IkReal(0.0300000000000000))*(x971)))+(((IkReal(-1.00000000000000))*(x976)))))), ((gconst48)*(((((IkReal(-1.00000000000000))*(sj29)*(x976)))+(((IkReal(0.300000000000000))*(x974)))+(((IkReal(-1.00000000000000))*(pz)*(x973)))+(((IkReal(-1.00000000000000))*(x971)*(x972)))+(((IkReal(-1.00000000000000))*(cj29)*(x970)))+(((IkReal(0.0300000000000000))*(sj29)*(x971)))+(((IkReal(-0.300000000000000))*(x971)))+(x970)+(((x972)*(x974)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x977=IKcos(j27);
IkReal x978=IKsin(j27);
IkReal x979=((IkReal(0.313800000000000))*(cj29));
IkReal x980=((IkReal(0.0300000000000000))*(cj29));
IkReal x981=((px)*(sj26));
IkReal x982=((cj26)*(py));
IkReal x983=((IkReal(1.00000000000000))*(pz));
IkReal x984=((IkReal(0.313800000000000))*(sj29));
IkReal x985=((IkReal(0.0300000000000000))*(x978));
IkReal x986=((IkReal(0.0600000000000000))*(x978));
IkReal x987=((IkReal(0.0300000000000000))*(x977));
IkReal x988=((IkReal(0.600000000000000))*(x977));
IkReal x989=((pz)*(x977));
evalcond[0]=((IkReal(0.300000000000000))+(((IkReal(-1.00000000000000))*(x977)*(x982)))+(((x977)*(x981)))+(((IkReal(-1.00000000000000))*(x978)*(x983)))+(((IkReal(-0.0300000000000000))*(sj29)))+(x979));
evalcond[1]=((((x978)*(x979)))+(((IkReal(-1.00000000000000))*(x983)))+(((IkReal(-1.00000000000000))*(sj29)*(x985)))+(((IkReal(0.300000000000000))*(x978)))+(((IkReal(-1.00000000000000))*(x977)*(x984)))+(((IkReal(-1.00000000000000))*(x977)*(x980)))+(x987));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x984)))+(((IkReal(-1.00000000000000))*(x980)))+(((IkReal(-1.00000000000000))*(x978)*(x981)))+(((IkReal(-1.00000000000000))*(x977)*(x983)))+(((x978)*(x982))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x985)))+(((IkReal(-1.00000000000000))*(sj29)*(x987)))+(((IkReal(-1.00000000000000))*(x982)))+(((x977)*(x979)))+(((IkReal(0.300000000000000))*(x977)))+(x981)+(((x978)*(x984)))+(((x978)*(x980))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x981)*(x986)))+(((IkReal(0.0600000000000000))*(x989)))+(((IkReal(-1.00000000000000))*(x982)*(x986)))+(((IkReal(-1.00000000000000))*(pp)))+(((x982)*(x988)))+(((IkReal(-1.00000000000000))*(x981)*(x988)))+(((IkReal(0.600000000000000))*(pz)*(x978))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x990=(cj29)*(cj29);
IkReal x991=(sj29)*(sj29);
IkReal x992=((cj29)*(sj29));
if( IKabs(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.0975704400000000))*(x992)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(-0.00941400000000000))*(x990)))+(((IkReal(0.00941400000000000))*(x991)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x992)))+(((IkReal(-0.0984704400000000))*(x990)))+(((IkReal(-0.000900000000000000))*(x991)))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+((pz)*(pz)))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst49)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.0975704400000000))*(x992)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(-0.00941400000000000))*(x990)))+(((IkReal(0.00941400000000000))*(x991)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz)))))), ((gconst49)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0188280000000000))*(x992)))+(((IkReal(-0.0984704400000000))*(x990)))+(((IkReal(-0.000900000000000000))*(x991)))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+((pz)*(pz))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x993=IKcos(j27);
IkReal x994=IKsin(j27);
IkReal x995=((IkReal(0.313800000000000))*(cj29));
IkReal x996=((IkReal(0.0300000000000000))*(cj29));
IkReal x997=((px)*(sj26));
IkReal x998=((cj26)*(py));
IkReal x999=((IkReal(1.00000000000000))*(pz));
IkReal x1000=((IkReal(0.313800000000000))*(sj29));
IkReal x1001=((IkReal(0.0300000000000000))*(x994));
IkReal x1002=((IkReal(0.0600000000000000))*(x994));
IkReal x1003=((IkReal(0.0300000000000000))*(x993));
IkReal x1004=((IkReal(0.600000000000000))*(x993));
IkReal x1005=((pz)*(x993));
evalcond[0]=((IkReal(0.300000000000000))+(((x993)*(x997)))+(((IkReal(-1.00000000000000))*(x993)*(x998)))+(((IkReal(-1.00000000000000))*(x994)*(x999)))+(((IkReal(-0.0300000000000000))*(sj29)))+(x995));
evalcond[1]=((((x994)*(x995)))+(x1003)+(((IkReal(-1.00000000000000))*(x999)))+(((IkReal(-1.00000000000000))*(x1000)*(x993)))+(((IkReal(-1.00000000000000))*(x993)*(x996)))+(((IkReal(0.300000000000000))*(x994)))+(((IkReal(-1.00000000000000))*(sj29)*(x1001))));
evalcond[2]=((IkReal(0.0300000000000000))+(((x994)*(x998)))+(((IkReal(-1.00000000000000))*(x1000)))+(((IkReal(-1.00000000000000))*(x996)))+(((IkReal(-1.00000000000000))*(x994)*(x997)))+(((IkReal(-1.00000000000000))*(x993)*(x999))));
evalcond[3]=((((x993)*(x995)))+(((x1000)*(x994)))+(((IkReal(-1.00000000000000))*(x998)))+(((x994)*(x996)))+(((IkReal(-1.00000000000000))*(x1001)))+(((IkReal(0.300000000000000))*(x993)))+(((IkReal(-1.00000000000000))*(sj29)*(x1003)))+(x997));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x994)))+(((IkReal(-1.00000000000000))*(x1002)*(x998)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1002)*(x997)))+(((IkReal(0.0600000000000000))*(x1005)))+(((IkReal(-1.00000000000000))*(x1004)*(x997)))+(((x1004)*(x998))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x1006=((((IkReal(-1.00000000000000))*(py)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(px))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j28)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.190270440000000))+(((IkReal(0.186480000000000))*(cj29)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0368280000000000))*(sj29))));
evalcond[2]=x1006;
evalcond[3]=x1006;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
IkReal x1007=((IkReal(0.0300000000000000))*(cj29));
IkReal x1008=((cj26)*(py));
IkReal x1009=((px)*(sj26));
IkReal x1010=((IkReal(0.313800000000000))*(sj29));
gconst51=IKsign(((((IkReal(-0.300000000000000))*(pz)))+(((x1009)*(x1010)))+(((IkReal(0.0300000000000000))*(x1008)))+(((IkReal(-1.00000000000000))*(x1008)*(x1010)))+(((IkReal(-1.00000000000000))*(x1007)*(x1008)))+(((IkReal(0.0300000000000000))*(pz)*(sj29)))+(((IkReal(-0.313800000000000))*(cj29)*(pz)))+(((x1007)*(x1009)))+(((IkReal(-0.0300000000000000))*(x1009)))));
IkReal x1011=((cj26)*(py));
IkReal x1012=((px)*(sj26));
IkReal x1013=((IkReal(10.4600000000000))*(sj29));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1011)*(x1013)))+(x1011)+(((cj29)*(x1012)))+(((IkReal(-10.0000000000000))*(pz)))+(((x1012)*(x1013)))+(((IkReal(-10.4600000000000))*(cj29)*(pz)))+(((IkReal(-1.00000000000000))*(cj29)*(x1011)))+(((pz)*(sj29)))+(((IkReal(-1.00000000000000))*(x1012))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign((((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26)))));
dummyeval[0]=(((pz)*(pz))+((((cj26)*(cj26))*((py)*(py))))+((((px)*(px))*((sj26)*(sj26))))+(((IkReal(-2.00000000000000))*(cj26)*(px)*(py)*(sj26))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x1014=x1006;
evalcond[0]=((IKabs(pz))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j29)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(pp))));
evalcond[2]=x1014;
evalcond[3]=x1014;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*(px)*(sj26)))+(((cj26)*(py))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x1015=((cj26)*(py));
IkReal x1016=((px)*(sj26));
dummyeval[0]=((((IkReal(-1.00000000000000))*((x1015)*(x1015))))+(((IkReal(-1.00000000000000))*((x1016)*(x1016))))+(((IkReal(2.00000000000000))*(x1015)*(x1016))));
dummyeval[1]=((x1016)+(((IkReal(-1.00000000000000))*(x1015))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1017=((IkReal(1.00000000000000))*(pp));
IkReal x1018=((IkReal(-1.00000000000000))*(py));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j26)), IkReal(6.28318530717959))))))+(IKabs(px)));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1017))));
evalcond[2]=x1018;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1018;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1017))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1019=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(px))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j26)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1019))));
evalcond[2]=py;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=py;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1019))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1020=((IkReal(1.00000000000000))*(pp));
IkReal x1021=((IkReal(-1.00000000000000))*(px));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j26)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1020))));
evalcond[2]=x1021;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=x1021;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1020))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
IkReal x1022=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IKabs(py))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(j26, IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.376750440000000))+(((IkReal(-1.00000000000000))*(x1022))));
evalcond[2]=px;
evalcond[3]=IkReal(0.613800000000000);
evalcond[4]=px;
evalcond[5]=IkReal(0);
evalcond[6]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1022))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=IkReal(-1.00000000000000);
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=IkReal(-1.00000000000000);
op[1]=IkReal(0);
op[2]=IkReal(1.00000000000000);
polyroots2(op,zeror,numroots);
IkReal j27array[2], cj27array[2], sj27array[2], tempj27array[1];
int numsolutions = 0;
for(int ij27 = 0; ij27 < numroots; ++ij27)
{
IkReal htj27 = zeror[ij27];
tempj27array[0]=((IkReal(2.00000000000000))*(atan(htj27)));
for(int kj27 = 0; kj27 < 1; ++kj27)
{
j27array[numsolutions] = tempj27array[kj27];
if( j27array[numsolutions] > IKPI )
{
    j27array[numsolutions]-=IK2PI;
}
else if( j27array[numsolutions] < -IKPI )
{
    j27array[numsolutions]+=IK2PI;
}
sj27array[numsolutions] = IKsin(j27array[numsolutions]);
cj27array[numsolutions] = IKcos(j27array[numsolutions]);
numsolutions++;
}
}
bool j27valid[2]={true,true};
_nj27 = 2;
for(int ij27 = 0; ij27 < numsolutions; ++ij27)
    {
if( !j27valid[ij27] )
{
    continue;
}
    j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
htj27 = IKtan(j27/2);

_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < numsolutions; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
rotationfunction0(solutions);
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x1023=((cj26)*(py));
IkReal x1024=((px)*(sj26));
IkReal x1025=((IkReal(5000.00000000000))*(pp));
if( IKabs(((((IKabs(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1023)*(x1025)))+(((IkReal(1883.75220000000))*(x1023)))+(((x1024)*(x1025)))+(((IkReal(-1883.75220000000))*(x1024))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1023)))+(((IkReal(5000.00000000000))*(x1024))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1023)))+(((IkReal(5000.00000000000))*(x1024)))))):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1023)*(x1025)))+(((IkReal(1883.75220000000))*(x1023)))+(((x1024)*(x1025)))+(((IkReal(-1883.75220000000))*(x1024)))))))+IKsqr(((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1023)))+(((IkReal(5000.00000000000))*(x1024))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1023)))+(((IkReal(5000.00000000000))*(x1024)))))):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IKabs(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023)))))) != 0)?((IkReal)1/(((((IkReal(-300.000000000000))*((x1024)*(x1024))))+(((IkReal(600.000000000000))*(x1023)*(x1024)))+(((IkReal(-300.000000000000))*((x1023)*(x1023))))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x1023)*(x1025)))+(((IkReal(1883.75220000000))*(x1023)))+(((x1024)*(x1025)))+(((IkReal(-1883.75220000000))*(x1024)))))), ((IkReal(-3069.00000000000))*(((IKabs(((((IkReal(-5000.00000000000))*(x1023)))+(((IkReal(5000.00000000000))*(x1024))))) != 0)?((IkReal)1/(((((IkReal(-5000.00000000000))*(x1023)))+(((IkReal(5000.00000000000))*(x1024)))))):(IkReal)1.0e30))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x1026=IKcos(j27);
IkReal x1027=IKsin(j27);
IkReal x1028=((cj26)*(py));
IkReal x1029=((px)*(sj26));
IkReal x1030=((IkReal(0.0600000000000000))*(x1027));
IkReal x1031=((IkReal(0.600000000000000))*(x1026));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x1026)*(x1028)))+(((x1026)*(x1029))));
evalcond[1]=((IkReal(0.613800000000000))*(x1027));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1027)*(x1028)))+(((x1027)*(x1029))));
evalcond[3]=((x1029)+(((IkReal(-1.00000000000000))*(x1028)))+(((IkReal(0.613800000000000))*(x1026))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1029)*(x1031)))+(((IkReal(-1.00000000000000))*(x1029)*(x1030)))+(((IkReal(-1.00000000000000))*(pp)))+(((x1028)*(x1031)))+(((x1028)*(x1030))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x1032=((cj26)*(py));
IkReal x1033=((px)*(sj26));
if( IKabs(((((IKabs(((((IkReal(-184.140000000000))*(x1033)))+(((IkReal(184.140000000000))*(x1032))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1033)))+(((IkReal(184.140000000000))*(x1032)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(6000.00000000000))*(x1032)*(x1033)))+(((IkReal(-3000.00000000000))*((x1033)*(x1033))))+(((IkReal(3069.00000000000))*(pp))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.62919517758227))*(x1032)))+(((IkReal(-1.62919517758227))*(x1033))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-184.140000000000))*(x1033)))+(((IkReal(184.140000000000))*(x1032))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1033)))+(((IkReal(184.140000000000))*(x1032)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(6000.00000000000))*(x1032)*(x1033)))+(((IkReal(-3000.00000000000))*((x1033)*(x1033))))+(((IkReal(3069.00000000000))*(pp)))))))+IKsqr(((((IkReal(1.62919517758227))*(x1032)))+(((IkReal(-1.62919517758227))*(x1033)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j27array[0]=IKatan2(((((IKabs(((((IkReal(-184.140000000000))*(x1033)))+(((IkReal(184.140000000000))*(x1032))))) != 0)?((IkReal)1/(((((IkReal(-184.140000000000))*(x1033)))+(((IkReal(184.140000000000))*(x1032)))))):(IkReal)1.0e30))*(((IkReal(-25.9957803600000))+(((IkReal(-3000.00000000000))*((x1032)*(x1032))))+(((IkReal(6000.00000000000))*(x1032)*(x1033)))+(((IkReal(-3000.00000000000))*((x1033)*(x1033))))+(((IkReal(3069.00000000000))*(pp)))))), ((((IkReal(1.62919517758227))*(x1032)))+(((IkReal(-1.62919517758227))*(x1033)))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x1034=IKcos(j27);
IkReal x1035=IKsin(j27);
IkReal x1036=((cj26)*(py));
IkReal x1037=((px)*(sj26));
IkReal x1038=((IkReal(0.0600000000000000))*(x1035));
IkReal x1039=((IkReal(0.600000000000000))*(x1034));
evalcond[0]=((IkReal(0.613800000000000))+(((IkReal(-1.00000000000000))*(x1034)*(x1036)))+(((x1034)*(x1037))));
evalcond[1]=((IkReal(0.613800000000000))*(x1035));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1035)*(x1036)))+(((x1035)*(x1037))));
evalcond[3]=((x1037)+(((IkReal(-1.00000000000000))*(x1036)))+(((IkReal(0.613800000000000))*(x1034))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(-1.00000000000000))*(x1037)*(x1039)))+(((IkReal(-1.00000000000000))*(x1037)*(x1038)))+(((x1036)*(x1039)))+(((x1036)*(x1038)))+(((IkReal(-1.00000000000000))*(pp))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x1040=((pz)*(sj29));
IkReal x1041=((cj26)*(py));
IkReal x1042=((IkReal(0.313800000000000))*(cj29));
IkReal x1043=((px)*(sj26));
IkReal x1044=((IkReal(0.0300000000000000))*(cj29));
IkReal x1045=((IkReal(0.0300000000000000))*(sj29));
IkReal x1046=((IkReal(0.313800000000000))*(sj29));
if( IKabs(((gconst50)*(((((x1043)*(x1044)))+(((x1043)*(x1046)))+(((IkReal(-0.0300000000000000))*(x1043)))+(((IkReal(-0.0300000000000000))*(x1040)))+(((IkReal(0.0300000000000000))*(x1041)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1041)*(x1046)))+(((IkReal(-1.00000000000000))*(x1041)*(x1044)))+(((pz)*(x1042))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(-0.300000000000000))*(x1043)))+(((IkReal(0.300000000000000))*(x1041)))+(((x1043)*(x1045)))+(((x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1041)*(x1045)))+(((pz)*(x1044)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043)))+(((IkReal(0.313800000000000))*(x1040)))+(((IkReal(-0.0300000000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst50)*(((((x1043)*(x1044)))+(((x1043)*(x1046)))+(((IkReal(-0.0300000000000000))*(x1043)))+(((IkReal(-0.0300000000000000))*(x1040)))+(((IkReal(0.0300000000000000))*(x1041)))+(((IkReal(0.300000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x1041)*(x1046)))+(((IkReal(-1.00000000000000))*(x1041)*(x1044)))+(((pz)*(x1042)))))), ((gconst50)*(((((IkReal(-0.300000000000000))*(x1043)))+(((IkReal(0.300000000000000))*(x1041)))+(((x1043)*(x1045)))+(((x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1041)*(x1045)))+(((pz)*(x1044)))+(((IkReal(-1.00000000000000))*(x1042)*(x1043)))+(((IkReal(0.313800000000000))*(x1040)))+(((IkReal(-0.0300000000000000))*(pz)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x1047=IKcos(j27);
IkReal x1048=IKsin(j27);
IkReal x1049=((IkReal(0.313800000000000))*(cj29));
IkReal x1050=((IkReal(0.0300000000000000))*(cj29));
IkReal x1051=((px)*(sj26));
IkReal x1052=((cj26)*(py));
IkReal x1053=((IkReal(1.00000000000000))*(pz));
IkReal x1054=((IkReal(0.313800000000000))*(sj29));
IkReal x1055=((IkReal(0.0300000000000000))*(x1048));
IkReal x1056=((IkReal(0.0600000000000000))*(x1048));
IkReal x1057=((IkReal(0.0300000000000000))*(x1047));
IkReal x1058=((pz)*(x1047));
IkReal x1059=((IkReal(0.600000000000000))*(x1047));
evalcond[0]=((IkReal(0.300000000000000))+(x1049)+(((IkReal(-0.0300000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x1048)*(x1053)))+(((x1047)*(x1051)))+(((IkReal(-1.00000000000000))*(x1047)*(x1052))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1057)))+(((IkReal(-1.00000000000000))*(x1053)))+(((IkReal(0.300000000000000))*(x1048)))+(((x1048)*(x1049)))+(((x1047)*(x1054)))+(((x1047)*(x1050)))+(((IkReal(-1.00000000000000))*(sj29)*(x1055))));
evalcond[2]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1054)))+(((IkReal(-1.00000000000000))*(x1050)))+(x1058)+(((x1048)*(x1051)))+(((IkReal(-1.00000000000000))*(x1048)*(x1052))));
evalcond[3]=((x1051)+(x1055)+(((IkReal(0.300000000000000))*(x1047)))+(((IkReal(-1.00000000000000))*(x1052)))+(((IkReal(-1.00000000000000))*(x1048)*(x1054)))+(((IkReal(-1.00000000000000))*(x1048)*(x1050)))+(((x1047)*(x1049)))+(((IkReal(-1.00000000000000))*(sj29)*(x1057))));
evalcond[4]=((IkReal(0.00847044000000000))+(((IkReal(0.600000000000000))*(pz)*(x1048)))+(((IkReal(-0.0600000000000000))*(x1058)))+(((x1052)*(x1059)))+(((x1052)*(x1056)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1051)*(x1059)))+(((IkReal(-1.00000000000000))*(x1051)*(x1056))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x1060=(sj29)*(sj29);
IkReal x1061=(cj29)*(cj29);
IkReal x1062=((IkReal(0.0188280000000000))*(sj29));
if( IKabs(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x1060)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((cj29)*(x1062)))+(((IkReal(-0.00180000000000000))*(cj29)))+(((IkReal(0.000900000000000000))*(x1061)))+(((IkReal(-1.00000000000000))*(x1062))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.00941400000000000))*(x1061)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(-0.0975704400000000))*(cj29)*(sj29)))+(((IkReal(0.00941400000000000))*(x1060)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst51)*(((IkReal(0.000900000000000000))+(((IkReal(0.0984704400000000))*(x1060)))+(((IkReal(-1.00000000000000))*((pz)*(pz))))+(((cj29)*(x1062)))+(((IkReal(-0.00180000000000000))*(cj29)))+(((IkReal(0.000900000000000000))*(x1061)))+(((IkReal(-1.00000000000000))*(x1062)))))), ((gconst51)*(((IkReal(0.00900000000000000))+(((IkReal(0.000414000000000000))*(cj29)))+(((IkReal(-0.00941400000000000))*(x1061)))+(((IkReal(-0.0950400000000000))*(sj29)))+(((IkReal(-0.0975704400000000))*(cj29)*(sj29)))+(((IkReal(0.00941400000000000))*(x1060)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[5];
IkReal x1063=IKcos(j27);
IkReal x1064=IKsin(j27);
IkReal x1065=((IkReal(0.313800000000000))*(cj29));
IkReal x1066=((IkReal(0.0300000000000000))*(cj29));
IkReal x1067=((px)*(sj26));
IkReal x1068=((cj26)*(py));
IkReal x1069=((IkReal(1.00000000000000))*(pz));
IkReal x1070=((IkReal(0.313800000000000))*(sj29));
IkReal x1071=((IkReal(0.0300000000000000))*(x1064));
IkReal x1072=((IkReal(0.0600000000000000))*(x1064));
IkReal x1073=((IkReal(0.0300000000000000))*(x1063));
IkReal x1074=((pz)*(x1063));
IkReal x1075=((IkReal(0.600000000000000))*(x1063));
evalcond[0]=((IkReal(0.300000000000000))+(x1065)+(((x1063)*(x1067)))+(((IkReal(-0.0300000000000000))*(sj29)))+(((IkReal(-1.00000000000000))*(x1064)*(x1069)))+(((IkReal(-1.00000000000000))*(x1063)*(x1068))));
evalcond[1]=((((IkReal(0.300000000000000))*(x1064)))+(((IkReal(-1.00000000000000))*(sj29)*(x1071)))+(((x1063)*(x1070)))+(((x1063)*(x1066)))+(((IkReal(-1.00000000000000))*(x1069)))+(((IkReal(-1.00000000000000))*(x1073)))+(((x1064)*(x1065))));
evalcond[2]=((IkReal(0.0300000000000000))+(x1074)+(((IkReal(-1.00000000000000))*(x1064)*(x1068)))+(((IkReal(-1.00000000000000))*(x1066)))+(((IkReal(-1.00000000000000))*(x1070)))+(((x1064)*(x1067))));
evalcond[3]=((((IkReal(0.300000000000000))*(x1063)))+(((IkReal(-1.00000000000000))*(sj29)*(x1073)))+(x1071)+(x1067)+(((x1063)*(x1065)))+(((IkReal(-1.00000000000000))*(x1064)*(x1066)))+(((IkReal(-1.00000000000000))*(x1068)))+(((IkReal(-1.00000000000000))*(x1064)*(x1070))));
evalcond[4]=((IkReal(0.00847044000000000))+(((x1068)*(x1075)))+(((x1068)*(x1072)))+(((IkReal(0.600000000000000))*(pz)*(x1064)))+(((IkReal(-0.0600000000000000))*(x1074)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-1.00000000000000))*(x1067)*(x1075)))+(((IkReal(-1.00000000000000))*(x1067)*(x1072))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x1076=((IkReal(0.0300000000000000))*(sj29));
IkReal x1077=((py)*(sj28));
IkReal x1078=((IkReal(0.313800000000000))*(cj29));
IkReal x1079=((IkReal(0.300000000000000))*(cj28));
IkReal x1080=((cj26)*(py));
IkReal x1081=((cj28)*(pz));
IkReal x1082=((cj28)*(px)*(sj26));
IkReal x1083=((cj26)*(sj26)*(sj28));
if( IKabs(((gconst46)*(((((px)*(x1077)*((sj26)*(sj26))))+(((IkReal(-1.00000000000000))*(sj26)*(x1077)*(x1080)))+(((pz)*(x1079)))+(((x1078)*(x1081)))+(((IkReal(-1.00000000000000))*(px)*(x1077)*((cj26)*(cj26))))+(((x1083)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x1076)*(x1081))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((x1079)*(x1080)))+(((x1076)*(x1082)))+(((cj26)*(px)*(pz)*(sj28)))+(((IkReal(-1.00000000000000))*(x1078)*(x1082)))+(((pz)*(sj26)*(x1077)))+(((cj28)*(x1078)*(x1080)))+(((IkReal(-1.00000000000000))*(px)*(sj26)*(x1079)))+(((IkReal(-1.00000000000000))*(cj28)*(x1076)*(x1080))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst46)*(((((px)*(x1077)*((sj26)*(sj26))))+(((IkReal(-1.00000000000000))*(sj26)*(x1077)*(x1080)))+(((pz)*(x1079)))+(((x1078)*(x1081)))+(((IkReal(-1.00000000000000))*(px)*(x1077)*((cj26)*(cj26))))+(((x1083)*((px)*(px))))+(((IkReal(-1.00000000000000))*(x1076)*(x1081)))))), ((gconst46)*(((((x1079)*(x1080)))+(((x1076)*(x1082)))+(((cj26)*(px)*(pz)*(sj28)))+(((IkReal(-1.00000000000000))*(x1078)*(x1082)))+(((pz)*(sj26)*(x1077)))+(((cj28)*(x1078)*(x1080)))+(((IkReal(-1.00000000000000))*(px)*(sj26)*(x1079)))+(((IkReal(-1.00000000000000))*(cj28)*(x1076)*(x1080)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x1084=IKcos(j27);
IkReal x1085=IKsin(j27);
IkReal x1086=((IkReal(0.313800000000000))*(cj29));
IkReal x1087=((IkReal(0.0300000000000000))*(cj29));
IkReal x1088=((py)*(sj26));
IkReal x1089=((cj26)*(py));
IkReal x1090=((px)*(sj26));
IkReal x1091=((IkReal(0.0600000000000000))*(cj28));
IkReal x1092=((cj26)*(px));
IkReal x1093=((IkReal(1.00000000000000))*(pz));
IkReal x1094=((IkReal(0.313800000000000))*(sj29));
IkReal x1095=((IkReal(0.0300000000000000))*(sj29));
IkReal x1096=((IkReal(1.00000000000000))*(cj28));
IkReal x1097=((IkReal(0.600000000000000))*(x1084));
IkReal x1098=((sj28)*(x1084));
IkReal x1099=((sj28)*(x1085));
IkReal x1100=((cj28)*(x1085));
evalcond[0]=((IkReal(0.300000000000000))+(x1086)+(((x1084)*(x1090)))+(((IkReal(-1.00000000000000))*(x1095)))+(((IkReal(-1.00000000000000))*(x1085)*(x1093)))+(((IkReal(-1.00000000000000))*(x1084)*(x1089))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1085)*(x1090)*(x1096)))+(((sj28)*(x1088)))+(((sj28)*(x1092)))+(((x1089)*(x1100)))+(((IkReal(-1.00000000000000))*(cj28)*(x1084)*(x1093))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1093)))+(((IkReal(-1.00000000000000))*(x1085)*(x1095)))+(((IkReal(-1.00000000000000))*(x1094)*(x1098)))+(((IkReal(-1.00000000000000))*(x1087)*(x1098)))+(((IkReal(0.0300000000000000))*(x1098)))+(((x1085)*(x1086)))+(((IkReal(0.300000000000000))*(x1085))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1088)*(x1096)))+(((IkReal(-1.00000000000000))*(x1090)*(x1099)))+(((x1089)*(x1099)))+(((IkReal(-1.00000000000000))*(x1094)))+(((IkReal(-1.00000000000000))*(x1092)*(x1096)))+(((IkReal(-1.00000000000000))*(x1093)*(x1098)))+(((IkReal(-1.00000000000000))*(x1087))));
evalcond[4]=((((x1087)*(x1099)))+(x1090)+(((IkReal(-1.00000000000000))*(x1084)*(x1095)))+(((x1094)*(x1099)))+(((IkReal(-1.00000000000000))*(x1089)))+(((IkReal(-0.0300000000000000))*(x1099)))+(((x1084)*(x1086)))+(((IkReal(0.300000000000000))*(x1084))));
evalcond[5]=((IkReal(0.00847044000000000))+(((IkReal(-0.0600000000000000))*(x1089)*(x1099)))+(((x1089)*(x1097)))+(((IkReal(-1.00000000000000))*(x1090)*(x1097)))+(((x1088)*(x1091)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)*(x1098)))+(((IkReal(0.0600000000000000))*(x1090)*(x1099)))+(((IkReal(0.600000000000000))*(pz)*(x1085)))+(((x1091)*(x1092))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j27array[1], cj27array[1], sj27array[1];
bool j27valid[1]={false};
_nj27 = 1;
IkReal x1101=(cj29)*(cj29);
IkReal x1102=(sj29)*(sj29);
IkReal x1103=((IkReal(0.00941400000000000))*(sj28));
IkReal x1104=((sj28)*(sj29));
if( IKabs(((gconst47)*(((((x1102)*(x1103)))+(((IkReal(0.00900000000000000))*(sj28)))+(((IkReal(0.000414000000000000))*(cj29)*(sj28)))+(((IkReal(-0.0950400000000000))*(x1104)))+(((IkReal(-0.0975704400000000))*(cj29)*(x1104)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz)))+(((IkReal(-1.00000000000000))*(x1101)*(x1103))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+((pz)*(pz))+(((IkReal(0.0188280000000000))*(cj29)*(sj29)))+(((IkReal(-0.000900000000000000))*(x1102)))+(((IkReal(-0.0984704400000000))*(x1101))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j27array[0]=IKatan2(((gconst47)*(((((x1102)*(x1103)))+(((IkReal(0.00900000000000000))*(sj28)))+(((IkReal(0.000414000000000000))*(cj29)*(sj28)))+(((IkReal(-0.0950400000000000))*(x1104)))+(((IkReal(-0.0975704400000000))*(cj29)*(x1104)))+(((px)*(pz)*(sj26)))+(((IkReal(-1.00000000000000))*(cj26)*(py)*(pz)))+(((IkReal(-1.00000000000000))*(x1101)*(x1103)))))), ((gconst47)*(((IkReal(-0.0900000000000000))+(((IkReal(0.0180000000000000))*(sj29)))+(((IkReal(-0.188280000000000))*(cj29)))+((pz)*(pz))+(((IkReal(0.0188280000000000))*(cj29)*(sj29)))+(((IkReal(-0.000900000000000000))*(x1102)))+(((IkReal(-0.0984704400000000))*(x1101)))))));
sj27array[0]=IKsin(j27array[0]);
cj27array[0]=IKcos(j27array[0]);
if( j27array[0] > IKPI )
{
    j27array[0]-=IK2PI;
}
else if( j27array[0] < -IKPI )
{    j27array[0]+=IK2PI;
}
j27valid[0] = true;
for(int ij27 = 0; ij27 < 1; ++ij27)
{
if( !j27valid[ij27] )
{
    continue;
}
_ij27[0] = ij27; _ij27[1] = -1;
for(int iij27 = ij27+1; iij27 < 1; ++iij27)
{
if( j27valid[iij27] && IKabs(cj27array[ij27]-cj27array[iij27]) < IKFAST_SOLUTION_THRESH && IKabs(sj27array[ij27]-sj27array[iij27]) < IKFAST_SOLUTION_THRESH )
{
    j27valid[iij27]=false; _ij27[1] = iij27; break; 
}
}
j27 = j27array[ij27]; cj27 = cj27array[ij27]; sj27 = sj27array[ij27];
{
IkReal evalcond[6];
IkReal x1105=IKcos(j27);
IkReal x1106=IKsin(j27);
IkReal x1107=((IkReal(0.313800000000000))*(cj29));
IkReal x1108=((IkReal(0.0300000000000000))*(cj29));
IkReal x1109=((py)*(sj26));
IkReal x1110=((cj26)*(py));
IkReal x1111=((px)*(sj26));
IkReal x1112=((IkReal(0.0600000000000000))*(cj28));
IkReal x1113=((cj26)*(px));
IkReal x1114=((IkReal(1.00000000000000))*(pz));
IkReal x1115=((IkReal(0.313800000000000))*(sj29));
IkReal x1116=((IkReal(0.0300000000000000))*(sj29));
IkReal x1117=((IkReal(1.00000000000000))*(cj28));
IkReal x1118=((IkReal(0.600000000000000))*(x1105));
IkReal x1119=((sj28)*(x1105));
IkReal x1120=((sj28)*(x1106));
IkReal x1121=((cj28)*(x1106));
evalcond[0]=((IkReal(0.300000000000000))+(x1107)+(((x1105)*(x1111)))+(((IkReal(-1.00000000000000))*(x1105)*(x1110)))+(((IkReal(-1.00000000000000))*(x1106)*(x1114)))+(((IkReal(-1.00000000000000))*(x1116))));
evalcond[1]=((((x1110)*(x1121)))+(((IkReal(-1.00000000000000))*(cj28)*(x1105)*(x1114)))+(((sj28)*(x1113)))+(((sj28)*(x1109)))+(((IkReal(-1.00000000000000))*(x1106)*(x1111)*(x1117))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1108)*(x1119)))+(((IkReal(-1.00000000000000))*(x1106)*(x1116)))+(((IkReal(-1.00000000000000))*(x1114)))+(((x1106)*(x1107)))+(((IkReal(-1.00000000000000))*(x1115)*(x1119)))+(((IkReal(0.0300000000000000))*(x1119)))+(((IkReal(0.300000000000000))*(x1106))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(-1.00000000000000))*(x1114)*(x1119)))+(((IkReal(-1.00000000000000))*(x1109)*(x1117)))+(((x1110)*(x1120)))+(((IkReal(-1.00000000000000))*(x1113)*(x1117)))+(((IkReal(-1.00000000000000))*(x1108)))+(((IkReal(-1.00000000000000))*(x1115)))+(((IkReal(-1.00000000000000))*(x1111)*(x1120))));
evalcond[4]=((x1111)+(((x1105)*(x1107)))+(((IkReal(-0.0300000000000000))*(x1120)))+(((IkReal(-1.00000000000000))*(x1110)))+(((x1108)*(x1120)))+(((IkReal(-1.00000000000000))*(x1105)*(x1116)))+(((x1115)*(x1120)))+(((IkReal(0.300000000000000))*(x1105))));
evalcond[5]=((IkReal(0.00847044000000000))+(((x1109)*(x1112)))+(((x1112)*(x1113)))+(((IkReal(0.0600000000000000))*(x1111)*(x1120)))+(((x1110)*(x1118)))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.0600000000000000))*(pz)*(x1119)))+(((IkReal(-0.0600000000000000))*(x1110)*(x1120)))+(((IkReal(0.600000000000000))*(pz)*(x1106)))+(((IkReal(-1.00000000000000))*(x1111)*(x1118))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x93=((IkReal(1.00000000000000))*(sj28));
IkReal x94=((IkReal(1.00000000000000))*(sj26));
IkReal x95=((cj26)*(cj28));
IkReal x96=((cj27)*(cj28));
IkReal x97=((sj27)*(sj29));
IkReal x98=((IkReal(1.00000000000000))*(sj27));
IkReal x99=((cj28)*(sj26));
IkReal x100=((cj27)*(cj29));
IkReal x101=((cj27)*(sj29));
IkReal x102=((cj29)*(x95));
IkReal x103=((sj29)*(x95));
IkReal x104=((IkReal(-1.00000000000000))*(sj26));
IkReal x105=((((IkReal(-1.00000000000000))*(cj29)*(sj27)*(x93)))+(x101));
IkReal x106=((((sj28)*(x100)))+(x97));
IkReal x107=((((IkReal(-1.00000000000000))*(cj26)*(x93)))+(((sj27)*(x99))));
IkReal x108=((((sj28)*(x101)))+(((IkReal(-1.00000000000000))*(cj29)*(x98))));
IkReal x109=((((IkReal(-1.00000000000000))*(x95)*(x98)))+(((IkReal(-1.00000000000000))*(sj26)*(x93))));
IkReal x110=((((IkReal(-1.00000000000000))*(x93)*(x97)))+(((IkReal(-1.00000000000000))*(x100))));
IkReal x111=((((cj26)*(x105)))+(((cj29)*(x99))));
IkReal x112=((x102)+(((x104)*(x105))));
IkReal x113=((((sj29)*(x99)))+(((cj26)*(x110))));
IkReal x114=((x103)+(((x104)*(x110))));
new_r00=((((r10)*(x111)))+(((r20)*(x106)))+(((r00)*(x112))));
new_r01=((((r01)*(((x102)+(((IkReal(-1.00000000000000))*(x105)*(x94)))))))+(((r21)*(x106)))+(((r11)*(x111))));
new_r02=((((r02)*(x112)))+(((r22)*(x106)))+(((r12)*(x111))));
new_r10=((((r10)*(x109)))+(((r20)*(x96)))+(((r00)*(x107))));
new_r11=((((r21)*(x96)))+(((r01)*(x107)))+(((r11)*(x109))));
new_r12=((((r02)*(x107)))+(((r12)*(x109)))+(((r22)*(x96))));
new_r20=((((r10)*(x113)))+(((r20)*(x108)))+(((r00)*(x114))));
new_r21=((((r01)*(((x103)+(((IkReal(-1.00000000000000))*(x110)*(x94)))))))+(((r21)*(x108)))+(((r11)*(x113))));
new_r22=((((r02)*(x114)))+(((r22)*(x108)))+(((r12)*(x113))));
{
IkReal j31array[2], cj31array[2], sj31array[2];
bool j31valid[2]={false};
_nj31 = 2;
cj31array[0]=new_r22;
if( cj31array[0] >= -1-IKFAST_SINCOS_THRESH && cj31array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j31valid[0] = j31valid[1] = true;
    j31array[0] = IKacos(cj31array[0]);
    sj31array[0] = IKsin(j31array[0]);
    cj31array[1] = cj31array[0];
    j31array[1] = -j31array[0];
    sj31array[1] = -sj31array[0];
}
else if( std::isnan(cj31array[0]) )
{
    // probably any value will work
    j31valid[0] = true;
    cj31array[0] = 1; sj31array[0] = 0; j31array[0] = 0;
}
for(int ij31 = 0; ij31 < 2; ++ij31)
{
if( !j31valid[ij31] )
{
    continue;
}
_ij31[0] = ij31; _ij31[1] = -1;
for(int iij31 = ij31+1; iij31 < 2; ++iij31)
{
if( j31valid[iij31] && IKabs(cj31array[ij31]-cj31array[iij31]) < IKFAST_SOLUTION_THRESH && IKabs(sj31array[ij31]-sj31array[iij31]) < IKFAST_SOLUTION_THRESH )
{
    j31valid[iij31]=false; _ij31[1] = iij31; break; 
}
}
j31 = j31array[ij31]; cj31 = cj31array[ij31]; sj31 = sj31array[ij31];

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(sj31);
dummyeval[0]=sj31;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(((((cj31)*((new_r12)*(new_r12))))+(((cj31)*((new_r02)*(new_r02))))));
dummyeval[0]=((((cj31)*((new_r12)*(new_r12))))+(((cj31)*((new_r02)*(new_r02)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j31)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))*(new_r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((IkReal(-1.00000000000000))*(new_r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(new_r21, ((IkReal(-1.00000000000000))*(new_r20)));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[2];
evalcond[0]=((IKcos(j32))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j32))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst60;
gconst60=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst61;
gconst61=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((gconst61)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst61)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((gconst61)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst61)*(new_r10)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x115=IKcos(j30);
IkReal x116=IKsin(j30);
IkReal x117=((IkReal(1.00000000000000))*(x116));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x117)))+(((new_r12)*(x115))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x115)))+(((new_r12)*(x116))));
evalcond[2]=((((new_r10)*(x115)))+(((IkReal(-1.00000000000000))*(new_r00)*(x117)))+(((IkReal(-1.00000000000000))*(sj32))));
evalcond[3]=((((new_r11)*(x115)))+(((IkReal(-1.00000000000000))*(new_r01)*(x117)))+(((IkReal(-1.00000000000000))*(cj32))));
evalcond[4]=((((new_r11)*(x116)))+(((new_r01)*(x115))));
evalcond[5]=((((new_r10)*(x116)))+(((new_r00)*(x115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((gconst60)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst60)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((gconst60)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst60)*(new_r11)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x118=IKcos(j30);
IkReal x119=IKsin(j30);
IkReal x120=((IkReal(1.00000000000000))*(x119));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x120)))+(((new_r12)*(x118))));
evalcond[1]=((IkReal(-1.00000000000000))+(((new_r02)*(x118)))+(((new_r12)*(x119))));
evalcond[2]=((((new_r10)*(x118)))+(((IkReal(-1.00000000000000))*(sj32)))+(((IkReal(-1.00000000000000))*(new_r00)*(x120))));
evalcond[3]=((((new_r11)*(x118)))+(((IkReal(-1.00000000000000))*(new_r01)*(x120)))+(((IkReal(-1.00000000000000))*(cj32))));
evalcond[4]=((((new_r11)*(x119)))+(((new_r01)*(x118))));
evalcond[5]=((((new_r10)*(x119)))+(((new_r00)*(x118))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j31)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=new_r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)), new_r20);
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j32))))+(new_r20));
evalcond[1]=((new_r21)+(IKsin(j32)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst64;
gconst64=IKsign(((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r01)*(new_r12)))+(((new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst65;
gconst65=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((gconst65)*(new_r00))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst65)*(new_r10))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((gconst65)*(new_r00)), ((IkReal(-1.00000000000000))*(gconst65)*(new_r10)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x121=IKcos(j30);
IkReal x122=IKsin(j30);
IkReal x123=((IkReal(1.00000000000000))*(x122));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x123)))+(((new_r12)*(x121))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x121)))+(((new_r12)*(x122))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj32)))+(((IkReal(-1.00000000000000))*(new_r00)*(x123)))+(((new_r10)*(x121))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x123)))+(((IkReal(-1.00000000000000))*(cj32)))+(((new_r11)*(x121))));
evalcond[4]=((((new_r01)*(x121)))+(((new_r11)*(x122))));
evalcond[5]=((((new_r00)*(x121)))+(((new_r10)*(x122))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
if( IKabs(((gconst64)*(new_r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst64)*(new_r11))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((gconst64)*(new_r01)), ((IkReal(-1.00000000000000))*(gconst64)*(new_r11)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x124=IKcos(j30);
IkReal x125=IKsin(j30);
IkReal x126=((IkReal(1.00000000000000))*(x125));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x126)))+(((new_r12)*(x124))));
evalcond[1]=((IkReal(1.00000000000000))+(((new_r02)*(x124)))+(((new_r12)*(x125))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj32)))+(((IkReal(-1.00000000000000))*(new_r00)*(x126)))+(((new_r10)*(x124))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x126)))+(((IkReal(-1.00000000000000))*(cj32)))+(((new_r11)*(x124))));
evalcond[4]=((((new_r01)*(x124)))+(((new_r11)*(x125))));
evalcond[5]=((((new_r00)*(x124)))+(((new_r10)*(x125))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j31)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x127=IKatan2(new_r02, new_r12);
j30array[0]=((IkReal(-1.00000000000000))*(x127));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
j30array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x127))));
sj30array[1]=IKsin(j30array[1]);
cj30array[1]=IKcos(j30array[1]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
if( j30array[1] > IKPI )
{
    j30array[1]-=IK2PI;
}
else if( j30array[1] < -IKPI )
{    j30array[1]+=IK2PI;
}
j30valid[1] = true;
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j30))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j30)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj30)*(new_r00)))+(((new_r10)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30)))))+IKsqr(((((cj30)*(new_r00)))+(((new_r10)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30)))), ((((cj30)*(new_r00)))+(((new_r10)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[4];
IkReal x128=IKsin(j32);
IkReal x129=((IkReal(1.00000000000000))*(sj30));
IkReal x130=((IkReal(1.00000000000000))*(IKcos(j32)));
evalcond[0]=((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x129)))+(((IkReal(-1.00000000000000))*(x128))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x129)))+(((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x130))));
evalcond[2]=((((cj30)*(new_r01)))+(((new_r11)*(sj30)))+(x128));
evalcond[3]=((((cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(x130)))+(((new_r10)*(sj30))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x131=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j31, IkReal(6.28318530717959))));
evalcond[1]=x131;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x131;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j30array[2], cj30array[2], sj30array[2];
bool j30valid[2]={false};
_nj30 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x132=IKatan2(new_r02, new_r12);
j30array[0]=((IkReal(-1.00000000000000))*(x132));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
j30array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x132))));
sj30array[1]=IKsin(j30array[1]);
cj30array[1]=IKcos(j30array[1]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
if( j30array[1] > IKPI )
{
    j30array[1]-=IK2PI;
}
else if( j30array[1] < -IKPI )
{    j30array[1]+=IK2PI;
}
j30valid[1] = true;
for(int ij30 = 0; ij30 < 2; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 2; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j30))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j30)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((cj30)*(new_r01)))+(((new_r11)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj30)*(new_r01)))+(((new_r11)*(sj30)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((cj30)*(new_r01)))+(((new_r11)*(sj30)))), ((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[4];
IkReal x133=IKcos(j32);
IkReal x134=((IkReal(1.00000000000000))*(sj30));
IkReal x135=((IkReal(1.00000000000000))*(IKsin(j32)));
evalcond[0]=((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x134)))+(((IkReal(-1.00000000000000))*(x135))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x134)))+(((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x133))));
evalcond[2]=((((cj30)*(new_r01)))+(((new_r11)*(sj30)))+(((IkReal(-1.00000000000000))*(x135))));
evalcond[3]=((((cj30)*(new_r00)))+(x133)+(((new_r10)*(sj30))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x136=((gconst53)*(new_r22)*(sj31));
if( IKabs(((new_r12)*(x136))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x136))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((new_r12)*(x136)), ((new_r02)*(x136)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x137=IKcos(j30);
IkReal x138=IKsin(j30);
IkReal x139=((IkReal(1.00000000000000))*(cj31));
IkReal x140=((IkReal(1.00000000000000))*(sj31));
IkReal x141=((new_r12)*(x138));
IkReal x142=((new_r02)*(x137));
evalcond[0]=((((new_r12)*(x137)))+(((IkReal(-1.00000000000000))*(new_r02)*(x138))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x140)))+(x141)+(x142));
evalcond[2]=((((cj31)*(x142)))+(((cj31)*(x141)))+(((IkReal(-1.00000000000000))*(new_r22)*(x140))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x138)*(x140)))+(((IkReal(-1.00000000000000))*(new_r20)*(x139)))+(((IkReal(-1.00000000000000))*(new_r00)*(x137)*(x140))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x139)))+(((IkReal(-1.00000000000000))*(new_r11)*(x138)*(x140)))+(((IkReal(-1.00000000000000))*(new_r01)*(x137)*(x140))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x140)*(x142)))+(((IkReal(-1.00000000000000))*(x140)*(x141)))+(((IkReal(-1.00000000000000))*(new_r22)*(x139))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj31);
dummyeval[0]=sj31;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj31;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj31;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x143=((((cj30)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj30))));
IkReal x144=((((cj30)*(new_r02)))+(((new_r12)*(sj30))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j31)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x143;
evalcond[5]=x143;
evalcond[6]=x144;
evalcond[7]=x144;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj30)*(new_r00)))+(((new_r10)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30)))))+IKsqr(((((cj30)*(new_r00)))+(((new_r10)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30)))), ((((cj30)*(new_r00)))+(((new_r10)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[4];
IkReal x145=IKsin(j32);
IkReal x146=((IkReal(1.00000000000000))*(sj30));
IkReal x147=((IkReal(1.00000000000000))*(IKcos(j32)));
evalcond[0]=((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(new_r00)*(x146))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x146)))+(((IkReal(-1.00000000000000))*(x147)))+(((cj30)*(new_r11))));
evalcond[2]=((((cj30)*(new_r01)))+(((new_r11)*(sj30)))+(x145));
evalcond[3]=((((IkReal(-1.00000000000000))*(x147)))+(((cj30)*(new_r00)))+(((new_r10)*(sj30))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x148=((IkReal(1.00000000000000))+(new_r22));
IkReal x149=((new_r12)*(sj30));
IkReal x150=((cj30)*(new_r02));
IkReal x151=((((cj30)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj30))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j31, IkReal(6.28318530717959))));
evalcond[1]=x148;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x151;
evalcond[5]=x151;
evalcond[6]=((x150)+(x149));
evalcond[7]=((((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x149))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x148;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((cj30)*(new_r01)))+(((new_r11)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj30)*(new_r01)))+(((new_r11)*(sj30)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((cj30)*(new_r01)))+(((new_r11)*(sj30)))), ((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[4];
IkReal x152=IKcos(j32);
IkReal x153=((IkReal(1.00000000000000))*(sj30));
IkReal x154=((IkReal(1.00000000000000))*(IKsin(j32)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x154)))+(((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x153))));
evalcond[1]=((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(new_r01)*(x153))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x154)))+(((cj30)*(new_r01)))+(((new_r11)*(sj30))));
evalcond[3]=((((cj30)*(new_r00)))+(x152)+(((new_r10)*(sj30))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj30)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj30)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[8];
IkReal x155=IKsin(j32);
IkReal x156=IKcos(j32);
IkReal x157=((IkReal(1.00000000000000))*(sj30));
IkReal x158=((cj30)*(new_r01));
IkReal x159=((IkReal(1.00000000000000))*(sj31));
IkReal x160=((cj30)*(new_r00));
IkReal x161=((new_r11)*(sj30));
IkReal x162=((new_r10)*(sj30));
IkReal x163=((IkReal(1.00000000000000))*(x156));
IkReal x164=((IkReal(1.00000000000000))*(x155));
evalcond[0]=((new_r20)+(((sj31)*(x156))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x155)*(x159)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(x164)))+(((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x157))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x163)))+(((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x157))));
evalcond[4]=((((cj31)*(x155)))+(x161)+(x158));
evalcond[5]=((x162)+(x160)+(((IkReal(-1.00000000000000))*(cj31)*(x163))));
evalcond[6]=((((cj31)*(x158)))+(((IkReal(-1.00000000000000))*(new_r21)*(x159)))+(x155)+(((cj31)*(x161))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x159)))+(((IkReal(-1.00000000000000))*(x163)))+(((cj31)*(x162)))+(((cj31)*(x160))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((new_r21)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))))+IKsqr(((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((new_r21)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))), ((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[8];
IkReal x165=IKsin(j32);
IkReal x166=IKcos(j32);
IkReal x167=((IkReal(1.00000000000000))*(sj30));
IkReal x168=((cj30)*(new_r01));
IkReal x169=((IkReal(1.00000000000000))*(sj31));
IkReal x170=((cj30)*(new_r00));
IkReal x171=((new_r11)*(sj30));
IkReal x172=((new_r10)*(sj30));
IkReal x173=((IkReal(1.00000000000000))*(x166));
IkReal x174=((IkReal(1.00000000000000))*(x165));
evalcond[0]=((((sj31)*(x166)))+(new_r20));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x165)*(x169))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x167)))+(((IkReal(-1.00000000000000))*(x174)))+(((cj30)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x173)))+(((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x167))));
evalcond[4]=((x171)+(x168)+(((cj31)*(x165))));
evalcond[5]=((x170)+(x172)+(((IkReal(-1.00000000000000))*(cj31)*(x173))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x169)))+(x165)+(((cj31)*(x171)))+(((cj31)*(x168))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x173)))+(((IkReal(-1.00000000000000))*(new_r20)*(x169)))+(((cj31)*(x170)))+(((cj31)*(x172))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j32array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[8];
IkReal x175=IKsin(j32);
IkReal x176=IKcos(j32);
IkReal x177=((IkReal(1.00000000000000))*(sj30));
IkReal x178=((cj30)*(new_r01));
IkReal x179=((IkReal(1.00000000000000))*(sj31));
IkReal x180=((cj30)*(new_r00));
IkReal x181=((new_r11)*(sj30));
IkReal x182=((new_r10)*(sj30));
IkReal x183=((IkReal(1.00000000000000))*(x176));
IkReal x184=((IkReal(1.00000000000000))*(x175));
evalcond[0]=((new_r20)+(((sj31)*(x176))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x175)*(x179)))+(new_r21));
evalcond[2]=((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(x184)))+(((IkReal(-1.00000000000000))*(new_r00)*(x177))));
evalcond[3]=((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x183)))+(((IkReal(-1.00000000000000))*(new_r01)*(x177))));
evalcond[4]=((x178)+(x181)+(((cj31)*(x175))));
evalcond[5]=((x180)+(x182)+(((IkReal(-1.00000000000000))*(cj31)*(x183))));
evalcond[6]=((((cj31)*(x181)))+(((IkReal(-1.00000000000000))*(new_r21)*(x179)))+(x175)+(((cj31)*(x178))));
evalcond[7]=((((cj31)*(x182)))+(((cj31)*(x180)))+(((IkReal(-1.00000000000000))*(new_r20)*(x179)))+(((IkReal(-1.00000000000000))*(x183))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x185=((gconst52)*(sj31));
if( IKabs(((new_r12)*(x185))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x185))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((new_r12)*(x185)), ((new_r02)*(x185)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[6];
IkReal x186=IKcos(j30);
IkReal x187=IKsin(j30);
IkReal x188=((IkReal(1.00000000000000))*(cj31));
IkReal x189=((IkReal(1.00000000000000))*(sj31));
IkReal x190=((new_r12)*(x187));
IkReal x191=((new_r02)*(x186));
evalcond[0]=((((new_r12)*(x186)))+(((IkReal(-1.00000000000000))*(new_r02)*(x187))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x189)))+(x191)+(x190));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r22)*(x189)))+(((cj31)*(x191)))+(((cj31)*(x190))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x186)*(x189)))+(((IkReal(-1.00000000000000))*(new_r20)*(x188)))+(((IkReal(-1.00000000000000))*(new_r10)*(x187)*(x189))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r21)*(x188)))+(((IkReal(-1.00000000000000))*(new_r11)*(x187)*(x189)))+(((IkReal(-1.00000000000000))*(new_r01)*(x186)*(x189))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x189)*(x191)))+(((IkReal(-1.00000000000000))*(x189)*(x190)))+(((IkReal(-1.00000000000000))*(new_r22)*(x188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(sj31);
dummyeval[0]=sj31;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj31;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj31;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x192=((((cj30)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj30))));
IkReal x193=((((cj30)*(new_r02)))+(((new_r12)*(sj30))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j31)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x192;
evalcond[5]=x192;
evalcond[6]=x193;
evalcond[7]=x193;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj30)*(new_r00)))+(((new_r10)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30)))))+IKsqr(((((cj30)*(new_r00)))+(((new_r10)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj30)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj30)))), ((((cj30)*(new_r00)))+(((new_r10)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[4];
IkReal x194=IKsin(j32);
IkReal x195=((IkReal(1.00000000000000))*(sj30));
IkReal x196=((IkReal(1.00000000000000))*(IKcos(j32)));
evalcond[0]=((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(x194)))+(((IkReal(-1.00000000000000))*(new_r00)*(x195))));
evalcond[1]=((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x196)))+(((IkReal(-1.00000000000000))*(new_r01)*(x195))));
evalcond[2]=((((cj30)*(new_r01)))+(((new_r11)*(sj30)))+(x194));
evalcond[3]=((((cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(x196)))+(((new_r10)*(sj30))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x197=((IkReal(1.00000000000000))+(new_r22));
IkReal x198=((new_r12)*(sj30));
IkReal x199=((cj30)*(new_r02));
IkReal x200=((((cj30)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(sj30))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j31, IkReal(6.28318530717959))));
evalcond[1]=x197;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x200;
evalcond[5]=x200;
evalcond[6]=((x199)+(x198));
evalcond[7]=((((IkReal(-1.00000000000000))*(x199)))+(((IkReal(-1.00000000000000))*(x198))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x197;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((cj30)*(new_r01)))+(((new_r11)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj30)*(new_r01)))+(((new_r11)*(sj30)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((cj30)*(new_r01)))+(((new_r11)*(sj30)))), ((((IkReal(-1.00000000000000))*(cj30)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[4];
IkReal x201=IKcos(j32);
IkReal x202=((IkReal(1.00000000000000))*(sj30));
IkReal x203=((IkReal(1.00000000000000))*(IKsin(j32)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x202)))+(((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(x203))));
evalcond[1]=((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x201)))+(((IkReal(-1.00000000000000))*(new_r01)*(x202))));
evalcond[2]=((((cj30)*(new_r01)))+(((new_r11)*(sj30)))+(((IkReal(-1.00000000000000))*(x203))));
evalcond[3]=((((cj30)*(new_r00)))+(((new_r10)*(sj30)))+(x201));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj30)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj30)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[8];
IkReal x204=IKsin(j32);
IkReal x205=IKcos(j32);
IkReal x206=((IkReal(1.00000000000000))*(sj30));
IkReal x207=((cj30)*(new_r01));
IkReal x208=((IkReal(1.00000000000000))*(sj31));
IkReal x209=((cj30)*(new_r00));
IkReal x210=((new_r11)*(sj30));
IkReal x211=((new_r10)*(sj30));
IkReal x212=((IkReal(1.00000000000000))*(x205));
IkReal x213=((IkReal(1.00000000000000))*(x204));
evalcond[0]=((new_r20)+(((sj31)*(x205))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x204)*(x208)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x206)))+(((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(x213))));
evalcond[3]=((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(new_r01)*(x206))));
evalcond[4]=((x210)+(x207)+(((cj31)*(x204))));
evalcond[5]=((x211)+(x209)+(((IkReal(-1.00000000000000))*(cj31)*(x212))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x208)))+(((cj31)*(x210)))+(x204)+(((cj31)*(x207))));
evalcond[7]=((((cj31)*(x211)))+(((IkReal(-1.00000000000000))*(new_r20)*(x208)))+(((IkReal(-1.00000000000000))*(x212)))+(((cj31)*(x209))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((new_r21)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj30))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((new_r21)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))))+IKsqr(((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj30)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j32array[0]=IKatan2(((new_r21)*(((IKabs(sj31) != 0)?((IkReal)1/(sj31)):(IkReal)1.0e30))), ((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(sj30)))));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[8];
IkReal x214=IKsin(j32);
IkReal x215=IKcos(j32);
IkReal x216=((IkReal(1.00000000000000))*(sj30));
IkReal x217=((cj30)*(new_r01));
IkReal x218=((IkReal(1.00000000000000))*(sj31));
IkReal x219=((cj30)*(new_r00));
IkReal x220=((new_r11)*(sj30));
IkReal x221=((new_r10)*(sj30));
IkReal x222=((IkReal(1.00000000000000))*(x215));
IkReal x223=((IkReal(1.00000000000000))*(x214));
evalcond[0]=((((sj31)*(x215)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x214)*(x218)))+(new_r21));
evalcond[2]=((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x216)))+(((IkReal(-1.00000000000000))*(x223))));
evalcond[3]=((((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x216)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[4]=((((cj31)*(x214)))+(x217)+(x220));
evalcond[5]=((x219)+(x221)+(((IkReal(-1.00000000000000))*(cj31)*(x222))));
evalcond[6]=((((cj31)*(x220)))+(((cj31)*(x217)))+(x214)+(((IkReal(-1.00000000000000))*(new_r21)*(x218))));
evalcond[7]=((((cj31)*(x221)))+(((cj31)*(x219)))+(((IkReal(-1.00000000000000))*(new_r20)*(x218)))+(((IkReal(-1.00000000000000))*(x222))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((gconst55)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst55)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j32array[0]=IKatan2(((gconst55)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst55)*(new_r20)));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[8];
IkReal x224=IKsin(j32);
IkReal x225=IKcos(j32);
IkReal x226=((IkReal(1.00000000000000))*(sj30));
IkReal x227=((cj30)*(new_r01));
IkReal x228=((IkReal(1.00000000000000))*(sj31));
IkReal x229=((cj30)*(new_r00));
IkReal x230=((new_r11)*(sj30));
IkReal x231=((new_r10)*(sj30));
IkReal x232=((IkReal(1.00000000000000))*(x225));
IkReal x233=((IkReal(1.00000000000000))*(x224));
evalcond[0]=((((sj31)*(x225)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x224)*(x228)))+(new_r21));
evalcond[2]=((((cj30)*(new_r10)))+(((IkReal(-1.00000000000000))*(x233)))+(((IkReal(-1.00000000000000))*(new_r00)*(x226))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x226)))+(((cj30)*(new_r11)))+(((IkReal(-1.00000000000000))*(x232))));
evalcond[4]=((((cj31)*(x224)))+(x227)+(x230));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj31)*(x232)))+(x229)+(x231));
evalcond[6]=((((cj31)*(x227)))+(x224)+(((cj31)*(x230)))+(((IkReal(-1.00000000000000))*(new_r21)*(x228))));
evalcond[7]=((((cj31)*(x229)))+(((IkReal(-1.00000000000000))*(x232)))+(((cj31)*(x231)))+(((IkReal(-1.00000000000000))*(new_r20)*(x228))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j32array[1], cj32array[1], sj32array[1];
bool j32valid[1]={false};
_nj32 = 1;
if( IKabs(((gconst54)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst54)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j32array[0]=IKatan2(((gconst54)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst54)*(new_r20)));
sj32array[0]=IKsin(j32array[0]);
cj32array[0]=IKcos(j32array[0]);
if( j32array[0] > IKPI )
{
    j32array[0]-=IK2PI;
}
else if( j32array[0] < -IKPI )
{    j32array[0]+=IK2PI;
}
j32valid[0] = true;
for(int ij32 = 0; ij32 < 1; ++ij32)
{
if( !j32valid[ij32] )
{
    continue;
}
_ij32[0] = ij32; _ij32[1] = -1;
for(int iij32 = ij32+1; iij32 < 1; ++iij32)
{
if( j32valid[iij32] && IKabs(cj32array[ij32]-cj32array[iij32]) < IKFAST_SOLUTION_THRESH && IKabs(sj32array[ij32]-sj32array[iij32]) < IKFAST_SOLUTION_THRESH )
{
    j32valid[iij32]=false; _ij32[1] = iij32; break; 
}
}
j32 = j32array[ij32]; cj32 = cj32array[ij32]; sj32 = sj32array[ij32];
{
IkReal evalcond[2];
evalcond[0]=((((sj31)*(IKcos(j32))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj31)*(IKsin(j32))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst56;
gconst56=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst57;
gconst57=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x234=((gconst57)*(sj32));
if( IKabs(((new_r12)*(x234))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x234))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((new_r12)*(x234)), ((new_r02)*(x234)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[12];
IkReal x235=IKcos(j30);
IkReal x236=IKsin(j30);
IkReal x237=((IkReal(1.00000000000000))*(cj32));
IkReal x238=((IkReal(1.00000000000000))*(cj31));
IkReal x239=((IkReal(1.00000000000000))*(sj31));
IkReal x240=((new_r00)*(x235));
IkReal x241=((new_r10)*(x236));
IkReal x242=((new_r12)*(x236));
IkReal x243=((new_r01)*(x235));
IkReal x244=((new_r02)*(x235));
IkReal x245=((new_r11)*(x236));
IkReal x246=((IkReal(1.00000000000000))*(x236));
IkReal x247=((x236)*(x239));
evalcond[0]=((((new_r12)*(x235)))+(((IkReal(-1.00000000000000))*(new_r02)*(x246))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x239)))+(x242)+(x244));
evalcond[2]=((((new_r10)*(x235)))+(((IkReal(-1.00000000000000))*(sj32)))+(((IkReal(-1.00000000000000))*(new_r00)*(x246))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x246)))+(((new_r11)*(x235)))+(((IkReal(-1.00000000000000))*(x237))));
evalcond[4]=((x243)+(x245)+(((cj31)*(sj32))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj31)*(x237)))+(x241)+(x240));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x239)))+(((cj31)*(x242)))+(((cj31)*(x244))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x238)))+(((IkReal(-1.00000000000000))*(x239)*(x241)))+(((IkReal(-1.00000000000000))*(x239)*(x240))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x238)))+(((IkReal(-1.00000000000000))*(x239)*(x245)))+(((IkReal(-1.00000000000000))*(x239)*(x243))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x239)))+(sj32)+(((cj31)*(x243)))+(((cj31)*(x245))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x238)))+(((IkReal(-1.00000000000000))*(x239)*(x244)))+(((IkReal(-1.00000000000000))*(x239)*(x242))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x239)))+(((IkReal(-1.00000000000000))*(x237)))+(((cj31)*(x241)))+(((cj31)*(x240))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j30array[1], cj30array[1], sj30array[1];
bool j30valid[1]={false};
_nj30 = 1;
IkReal x248=((gconst56)*(sj31));
if( IKabs(((new_r12)*(x248))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x248))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j30array[0]=IKatan2(((new_r12)*(x248)), ((new_r02)*(x248)));
sj30array[0]=IKsin(j30array[0]);
cj30array[0]=IKcos(j30array[0]);
if( j30array[0] > IKPI )
{
    j30array[0]-=IK2PI;
}
else if( j30array[0] < -IKPI )
{    j30array[0]+=IK2PI;
}
j30valid[0] = true;
for(int ij30 = 0; ij30 < 1; ++ij30)
{
if( !j30valid[ij30] )
{
    continue;
}
_ij30[0] = ij30; _ij30[1] = -1;
for(int iij30 = ij30+1; iij30 < 1; ++iij30)
{
if( j30valid[iij30] && IKabs(cj30array[ij30]-cj30array[iij30]) < IKFAST_SOLUTION_THRESH && IKabs(sj30array[ij30]-sj30array[iij30]) < IKFAST_SOLUTION_THRESH )
{
    j30valid[iij30]=false; _ij30[1] = iij30; break; 
}
}
j30 = j30array[ij30]; cj30 = cj30array[ij30]; sj30 = sj30array[ij30];
{
IkReal evalcond[12];
IkReal x249=IKcos(j30);
IkReal x250=IKsin(j30);
IkReal x251=((IkReal(1.00000000000000))*(cj32));
IkReal x252=((IkReal(1.00000000000000))*(cj31));
IkReal x253=((IkReal(1.00000000000000))*(sj31));
IkReal x254=((new_r00)*(x249));
IkReal x255=((new_r10)*(x250));
IkReal x256=((new_r12)*(x250));
IkReal x257=((new_r01)*(x249));
IkReal x258=((new_r02)*(x249));
IkReal x259=((new_r11)*(x250));
IkReal x260=((IkReal(1.00000000000000))*(x250));
IkReal x261=((x250)*(x253));
evalcond[0]=((((new_r12)*(x249)))+(((IkReal(-1.00000000000000))*(new_r02)*(x260))));
evalcond[1]=((x258)+(x256)+(((IkReal(-1.00000000000000))*(x253))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x260)))+(((IkReal(-1.00000000000000))*(sj32)))+(((new_r10)*(x249))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x260)))+(((new_r11)*(x249)))+(((IkReal(-1.00000000000000))*(x251))));
evalcond[4]=((x259)+(x257)+(((cj31)*(sj32))));
evalcond[5]=((x254)+(x255)+(((IkReal(-1.00000000000000))*(cj31)*(x251))));
evalcond[6]=((((cj31)*(x258)))+(((cj31)*(x256)))+(((IkReal(-1.00000000000000))*(new_r22)*(x253))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x252)))+(((IkReal(-1.00000000000000))*(x253)*(x255)))+(((IkReal(-1.00000000000000))*(x253)*(x254))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x252)))+(((IkReal(-1.00000000000000))*(x253)*(x257)))+(((IkReal(-1.00000000000000))*(x253)*(x259))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r21)*(x253)))+(((cj31)*(x259)))+(((cj31)*(x257)))+(sj32));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x252)))+(((IkReal(-1.00000000000000))*(x253)*(x256)))+(((IkReal(-1.00000000000000))*(x253)*(x258))));
evalcond[11]=((((cj31)*(x254)))+(((cj31)*(x255)))+(((IkReal(-1.00000000000000))*(new_r20)*(x253)))+(((IkReal(-1.00000000000000))*(x251))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j26;
vinfos[0].indices[0] = _ij26[0];
vinfos[0].indices[1] = _ij26[1];
vinfos[0].maxsolutions = _nj26;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j27;
vinfos[1].indices[0] = _ij27[0];
vinfos[1].indices[1] = _ij27[1];
vinfos[1].maxsolutions = _nj27;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j28;
vinfos[2].indices[0] = _ij28[0];
vinfos[2].indices[1] = _ij28[1];
vinfos[2].maxsolutions = _nj28;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j29;
vinfos[3].indices[0] = _ij29[0];
vinfos[3].indices[1] = _ij29[1];
vinfos[3].maxsolutions = _nj29;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j30;
vinfos[4].indices[0] = _ij30[0];
vinfos[4].indices[1] = _ij30[1];
vinfos[4].maxsolutions = _nj30;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j31;
vinfos[5].indices[0] = _ij31[0];
vinfos[5].indices[1] = _ij31[1];
vinfos[5].maxsolutions = _nj31;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j32;
vinfos[6].indices[0] = _ij32[0];
vinfos[6].indices[1] = _ij32[1];
vinfos[6].maxsolutions = _nj32;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "6f771bc450094c2ed84997db09e905b0"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
// int main(int argc, char** argv)
// {
//     if( argc != 12+GetNumFreeParameters()+1 ) {
//         printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
//                "Returns the ik solutions given the transformation of the end effector specified by\n"
//                "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
//                "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
//         return 1;
//     }

//     IkSolutionList<IkReal> solutions;
//     std::vector<IkReal> vfree(GetNumFreeParameters());
//     IkReal eerot[9],eetrans[3];
//     eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
//     eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
//     eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
//     for(std::size_t i = 0; i < vfree.size(); ++i)
//         vfree[i] = atof(argv[13+i]);
//     bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

//     if( !bSuccess ) {
//         fprintf(stderr,"Failed to get ik solution\n");
//         return -1;
//     }

//     printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
//     std::vector<IkReal> solvalues(GetNumJoints());
//     for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
//         const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
//         printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
//         std::vector<IkReal> vsolfree(sol.GetFree().size());
//         sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
//         for( std::size_t j = 0; j < solvalues.size(); ++j)
//             printf("%.15f, ", solvalues[j]);
//         printf("\n");
//     }
//     return 0;
// }

#endif
